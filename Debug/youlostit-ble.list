
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004164  08004164  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  08004164  08004164  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004164  08004164  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800416c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000198  08004304  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08004304  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b188  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d9  00000000  00000000  0002b393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002d570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000793  00000000  00000000  0002dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002741d  00000000  00000000  0002e743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba87  00000000  00000000  00055b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0f49  00000000  00000000  000615e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dd4  00000000  00000000  00152530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00155304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000198 	.word	0x20000198
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040dc 	.word	0x080040dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000019c 	.word	0x2000019c
 80001c4:	080040dc 	.word	0x080040dc

080001c8 <ble_init>:
uint8_t READ_CHAR_HANDLE[2];

uint16_t stackInitCompleteFlag=0;
uint8_t* rxEvent;

void ble_init(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 80001ce:	2006      	movs	r0, #6
 80001d0:	f003 faba 	bl	8003748 <malloc>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b70      	ldr	r3, [pc, #448]	; (800039c <ble_init+0x1d4>)
 80001da:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 80001dc:	bf00      	nop
 80001de:	4b70      	ldr	r3, [pc, #448]	; (80003a0 <ble_init+0x1d8>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0fb      	beq.n	80001de <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80001e6:	4b6d      	ldr	r3, [pc, #436]	; (800039c <ble_init+0x1d4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2106      	movs	r1, #6
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f905 	bl	80003fc <fetchBleEvent>
 80001f2:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d111      	bne.n	800021e <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80001fa:	4b68      	ldr	r3, [pc, #416]	; (800039c <ble_init+0x1d4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2206      	movs	r2, #6
 8000200:	4968      	ldr	r1, [pc, #416]	; (80003a4 <ble_init+0x1dc>)
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f984 	bl	8000510 <checkEventResp>
 8000208:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d106      	bne.n	800021e <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 8000210:	4b65      	ldr	r3, [pc, #404]	; (80003a8 <ble_init+0x1e0>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b63      	ldr	r3, [pc, #396]	; (80003a8 <ble_init+0x1e0>)
 800021c:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 800021e:	200a      	movs	r0, #10
 8000220:	f001 faf8 	bl	8001814 <HAL_Delay>
	free(rxEvent);
 8000224:	4b5d      	ldr	r3, [pc, #372]	; (800039c <ble_init+0x1d4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f003 fa95 	bl	8003758 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2307      	movs	r3, #7
 8000234:	4a5d      	ldr	r2, [pc, #372]	; (80003ac <ble_init+0x1e4>)
 8000236:	2104      	movs	r1, #4
 8000238:	485d      	ldr	r0, [pc, #372]	; (80003b0 <ble_init+0x1e8>)
 800023a:	f000 fa79 	bl	8000730 <BLE_command>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d106      	bne.n	8000252 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000244:	4b58      	ldr	r3, [pc, #352]	; (80003a8 <ble_init+0x1e0>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b56      	ldr	r3, [pc, #344]	; (80003a8 <ble_init+0x1e0>)
 8000250:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000252:	4b52      	ldr	r3, [pc, #328]	; (800039c <ble_init+0x1d4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fa7e 	bl	8003758 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 800025c:	2303      	movs	r3, #3
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2307      	movs	r3, #7
 8000262:	4a54      	ldr	r2, [pc, #336]	; (80003b4 <ble_init+0x1ec>)
 8000264:	2107      	movs	r1, #7
 8000266:	4854      	ldr	r0, [pc, #336]	; (80003b8 <ble_init+0x1f0>)
 8000268:	f000 fa62 	bl	8000730 <BLE_command>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d11b      	bne.n	80002aa <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 8000272:	4b4d      	ldr	r3, [pc, #308]	; (80003a8 <ble_init+0x1e0>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	b29a      	uxth	r2, r3
 800027c:	4b4a      	ldr	r3, [pc, #296]	; (80003a8 <ble_init+0x1e0>)
 800027e:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000280:	4b46      	ldr	r3, [pc, #280]	; (800039c <ble_init+0x1d4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3307      	adds	r3, #7
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b29a      	uxth	r2, r3
 800028a:	4b4c      	ldr	r3, [pc, #304]	; (80003bc <ble_init+0x1f4>)
 800028c:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 800028e:	4b43      	ldr	r3, [pc, #268]	; (800039c <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3309      	adds	r3, #9
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b49      	ldr	r3, [pc, #292]	; (80003c0 <ble_init+0x1f8>)
 800029a:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <ble_init+0x1d4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	330b      	adds	r3, #11
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <ble_init+0x1fc>)
 80002a8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002aa:	4b3c      	ldr	r3, [pc, #240]	; (800039c <ble_init+0x1d4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 fa52 	bl	8003758 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80002b4:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <ble_init+0x200>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2307      	movs	r3, #7
 80002ba:	2200      	movs	r2, #0
 80002bc:	4940      	ldr	r1, [pc, #256]	; (80003c0 <ble_init+0x1f8>)
 80002be:	483f      	ldr	r0, [pc, #252]	; (80003bc <ble_init+0x1f4>)
 80002c0:	f000 fafc 	bl	80008bc <updateCharValue>
	stackInitCompleteFlag|=0x08;
 80002c4:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <ble_init+0x1e0>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <ble_init+0x1e0>)
 80002d0:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <ble_init+0x1d4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fa3e 	bl	8003758 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80002dc:	2300      	movs	r3, #0
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2307      	movs	r3, #7
 80002e2:	4a3a      	ldr	r2, [pc, #232]	; (80003cc <ble_init+0x204>)
 80002e4:	2110      	movs	r1, #16
 80002e6:	483a      	ldr	r0, [pc, #232]	; (80003d0 <ble_init+0x208>)
 80002e8:	f000 fa22 	bl	8000730 <BLE_command>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d106      	bne.n	8000300 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <ble_init+0x1e0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <ble_init+0x1e0>)
 80002fe:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000300:	4b26      	ldr	r3, [pc, #152]	; (800039c <ble_init+0x1d4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f003 fa27 	bl	8003758 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800030a:	2300      	movs	r3, #0
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2307      	movs	r3, #7
 8000310:	4a30      	ldr	r2, [pc, #192]	; (80003d4 <ble_init+0x20c>)
 8000312:	2106      	movs	r1, #6
 8000314:	4830      	ldr	r0, [pc, #192]	; (80003d8 <ble_init+0x210>)
 8000316:	f000 fa0b 	bl	8000730 <BLE_command>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d106      	bne.n	800032e <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <ble_init+0x1e0>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	b29a      	uxth	r2, r3
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <ble_init+0x1e0>)
 800032c:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <ble_init+0x1d4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fa10 	bl	8003758 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000338:	2300      	movs	r3, #0
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2307      	movs	r3, #7
 800033e:	4a27      	ldr	r2, [pc, #156]	; (80003dc <ble_init+0x214>)
 8000340:	2124      	movs	r1, #36	; 0x24
 8000342:	4827      	ldr	r0, [pc, #156]	; (80003e0 <ble_init+0x218>)
 8000344:	f000 f9f4 	bl	8000730 <BLE_command>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d106      	bne.n	800035c <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <ble_init+0x1e0>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <ble_init+0x1e0>)
 800035a:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <ble_init+0x1d4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f003 f9f9 	bl	8003758 <free>

	//This will start the advertisment,
	setConnectable();
 8000366:	f000 f963 	bl	8000630 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800036a:	2207      	movs	r2, #7
 800036c:	491d      	ldr	r1, [pc, #116]	; (80003e4 <ble_init+0x21c>)
 800036e:	481e      	ldr	r0, [pc, #120]	; (80003e8 <ble_init+0x220>)
 8000370:	f000 fa2a 	bl	80007c8 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000374:	2310      	movs	r3, #16
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2314      	movs	r3, #20
 800037a:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <ble_init+0x21c>)
 800037c:	491b      	ldr	r1, [pc, #108]	; (80003ec <ble_init+0x224>)
 800037e:	481c      	ldr	r0, [pc, #112]	; (80003f0 <ble_init+0x228>)
 8000380:	f000 fa5a 	bl	8000838 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000384:	2304      	movs	r3, #4
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2314      	movs	r3, #20
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <ble_init+0x21c>)
 800038c:	4919      	ldr	r1, [pc, #100]	; (80003f4 <ble_init+0x22c>)
 800038e:	481a      	ldr	r0, [pc, #104]	; (80003f8 <ble_init+0x230>)
 8000390:	f000 fa52 	bl	8000838 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 8000394:	bf00      	nop
}
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200002cc 	.word	0x200002cc
 80003a0:	200002d0 	.word	0x200002d0
 80003a4:	20000000 	.word	0x20000000
 80003a8:	200002ca 	.word	0x200002ca
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	20000008 	.word	0x20000008
 80003b4:	2000001c 	.word	0x2000001c
 80003b8:	20000014 	.word	0x20000014
 80003bc:	200001b4 	.word	0x200001b4
 80003c0:	200001b8 	.word	0x200001b8
 80003c4:	200001bc 	.word	0x200001bc
 80003c8:	200000ec 	.word	0x200000ec
 80003cc:	20000034 	.word	0x20000034
 80003d0:	20000024 	.word	0x20000024
 80003d4:	20000044 	.word	0x20000044
 80003d8:	2000003c 	.word	0x2000003c
 80003dc:	20000070 	.word	0x20000070
 80003e0:	2000004c 	.word	0x2000004c
 80003e4:	200002c0 	.word	0x200002c0
 80003e8:	200000f4 	.word	0x200000f4
 80003ec:	200002c8 	.word	0x200002c8
 80003f0:	20000114 	.word	0x20000114
 80003f4:	200002c4 	.word	0x200002c4
 80003f8:	20000104 	.word	0x20000104

080003fc <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08c      	sub	sp, #48	; 0x30
 8000400:	af02      	add	r7, sp, #8
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000406:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <fetchBleEvent+0x100>)
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000410:	6018      	str	r0, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000416:	2140      	movs	r1, #64	; 0x40
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <fetchBleEvent+0x104>)
 800041a:	f001 fcfb 	bl	8001e14 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d065      	beq.n	80004f0 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000424:	2005      	movs	r0, #5
 8000426:	f001 f9f5 	bl	8001814 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4834      	ldr	r0, [pc, #208]	; (8000504 <fetchBleEvent+0x108>)
 8000432:	f001 fd07 	bl	8001e44 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000436:	f107 0210 	add.w	r2, r7, #16
 800043a:	f107 0118 	add.w	r1, r7, #24
 800043e:	2301      	movs	r3, #1
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2305      	movs	r3, #5
 8000444:	4830      	ldr	r0, [pc, #192]	; (8000508 <fetchBleEvent+0x10c>)
 8000446:	f002 fdf9 	bl	800303c <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	482c      	ldr	r0, [pc, #176]	; (8000504 <fetchBleEvent+0x108>)
 8000452:	f001 fcf7 	bl	8001e44 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f001 f9dc 	bl	8001814 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	4828      	ldr	r0, [pc, #160]	; (8000504 <fetchBleEvent+0x108>)
 8000464:	f001 fcee 	bl	8001e44 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000468:	f107 0210 	add.w	r2, r7, #16
 800046c:	f107 0118 	add.w	r1, r7, #24
 8000470:	2301      	movs	r3, #1
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2305      	movs	r3, #5
 8000476:	4824      	ldr	r0, [pc, #144]	; (8000508 <fetchBleEvent+0x10c>)
 8000478:	f002 fde0 	bl	800303c <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 800047c:	7cfb      	ldrb	r3, [r7, #19]
 800047e:	461a      	mov	r2, r3
 8000480:	7d3b      	ldrb	r3, [r7, #20]
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	4313      	orrs	r3, r2
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  char dummy=0xff;
 8000488:	23ff      	movs	r3, #255	; 0xff
 800048a:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 800048c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	dd01      	ble.n	8000498 <fetchBleEvent+0x9c>
	  dataSize=size;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(dataSize>0){
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049a:	2b00      	cmp	r3, #0
 800049c:	dd1f      	ble.n	80004de <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
 80004a2:	e00d      	b.n	80004c0 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	441a      	add	r2, r3
 80004aa:	f107 010f 	add.w	r1, r7, #15
 80004ae:	2301      	movs	r3, #1
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4814      	ldr	r0, [pc, #80]	; (8000508 <fetchBleEvent+0x10c>)
 80004b6:	f002 fdc1 	bl	800303c <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 80004ba:	6a3b      	ldr	r3, [r7, #32]
 80004bc:	3301      	adds	r3, #1
 80004be:	623b      	str	r3, [r7, #32]
 80004c0:	6a3a      	ldr	r2, [r7, #32]
 80004c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbed      	blt.n	80004a4 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <fetchBleEvent+0x108>)
 80004d0:	f001 fcb8 	bl	8001e44 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <fetchBleEvent+0x110>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	e00a      	b.n	80004f4 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <fetchBleEvent+0x108>)
 80004e6:	f001 fcad 	bl	8001e44 <HAL_GPIO_WritePin>
        return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	e001      	b.n	80004f4 <fetchBleEvent+0xf8>
  }else{
  return -2;
 80004f0:	f06f 0301 	mvn.w	r3, #1
  }
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3728      	adds	r7, #40	; 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	080040f4 	.word	0x080040f4
 8000500:	48001000 	.word	0x48001000
 8000504:	48000c00 	.word	0x48000c00
 8000508:	200002d4 	.word	0x200002d4
 800050c:	200002d0 	.word	0x200002d0

08000510 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	int j=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00f      	b.n	8000546 <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	440b      	add	r3, r1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d002      	beq.n	8000540 <checkEventResp+0x30>
			return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	e007      	b.n	8000550 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	3301      	adds	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	dbeb      	blt.n	8000526 <checkEventResp+0x16>
		}
	}

return BLE_OK;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	371c      	adds	r7, #28
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000566:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <sendCommand+0x88>)
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	481a      	ldr	r0, [pc, #104]	; (80005e8 <sendCommand+0x8c>)
 800057e:	f001 fc61 	bl	8001e44 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000582:	f107 0208 	add.w	r2, r7, #8
 8000586:	f107 0110 	add.w	r1, r7, #16
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2305      	movs	r3, #5
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <sendCommand+0x90>)
 8000592:	f002 fd53 	bl	800303c <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000596:	7abb      	ldrb	r3, [r7, #10]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	7a7a      	ldrb	r2, [r7, #9]
 800059c:	4313      	orrs	r3, r2
 800059e:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	db09      	blt.n	80005bc <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2301      	movs	r3, #1
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <sendCommand+0x90>)
 80005b2:	f002 fbce 	bl	8002d52 <HAL_SPI_Transmit>
		result=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
 80005ba:	e002      	b.n	80005c2 <sendCommand+0x66>
	  }else{
		result=-1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <sendCommand+0x8c>)
 80005ca:	f001 fc3b 	bl	8001e44 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <sendCommand+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1cd      	bne.n	8000576 <sendCommand+0x1a>

}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080040fc 	.word	0x080040fc
 80005e8:	48000c00 	.word	0x48000c00
 80005ec:	200002d4 	.word	0x200002d4
 80005f0:	200002d0 	.word	0x200002d0

080005f4 <catchBLE>:

void catchBLE(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80005fa:	217f      	movs	r1, #127	; 0x7f
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <catchBLE+0x34>)
 80005fe:	f7ff fefd 	bl	80003fc <fetchBleEvent>
 8000602:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <catchBLE+0x2a>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 800060a:	2203      	movs	r2, #3
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <catchBLE+0x38>)
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <catchBLE+0x34>)
 8000610:	f7ff ff7e 	bl	8000510 <checkEventResp>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <catchBLE+0x2a>
			  setConnectable();
 800061a:	f000 f809 	bl	8000630 <setConnectable>
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001c0 	.word	0x200001c0
 800062c:	200000e8 	.word	0x200000e8

08000630 <setConnectable>:

void setConnectable(){
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000636:	200c      	movs	r0, #12
 8000638:	f003 f886 	bl	8003748 <malloc>
 800063c:	4603      	mov	r3, r0
 800063e:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a36      	ldr	r2, [pc, #216]	; (800071c <setConnectable+0xec>)
 8000644:	6810      	ldr	r0, [r2, #0]
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	8891      	ldrh	r1, [r2, #4]
 800064a:	7992      	ldrb	r2, [r2, #6]
 800064c:	8099      	strh	r1, [r3, #4]
 800064e:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3308      	adds	r3, #8
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3309      	adds	r3, #9
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	330a      	adds	r3, #10
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	330b      	adds	r3, #11
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3307      	adds	r3, #7
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <setConnectable+0xf0>)
 800067a:	2208      	movs	r2, #8
 800067c:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <setConnectable+0xf0>)
 8000680:	2215      	movs	r2, #21
 8000682:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000684:	2019      	movs	r0, #25
 8000686:	f003 f85f 	bl	8003748 <malloc>
 800068a:	4603      	mov	r3, r0
 800068c:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	4a23      	ldr	r2, [pc, #140]	; (8000720 <setConnectable+0xf0>)
 8000692:	461c      	mov	r4, r3
 8000694:	4613      	mov	r3, r2
 8000696:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000698:	6020      	str	r0, [r4, #0]
 800069a:	6061      	str	r1, [r4, #4]
 800069c:	60a2      	str	r2, [r4, #8]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	330d      	adds	r3, #13
 80006a6:	220c      	movs	r2, #12
 80006a8:	68f9      	ldr	r1, [r7, #12]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fb89 	bl	8003dc2 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80006b0:	2119      	movs	r1, #25
 80006b2:	68b8      	ldr	r0, [r7, #8]
 80006b4:	f7ff ff52 	bl	800055c <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 80006b8:	2007      	movs	r0, #7
 80006ba:	f003 f845 	bl	8003748 <malloc>
 80006be:	4603      	mov	r3, r0
 80006c0:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 80006c2:	bf00      	nop
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <setConnectable+0xf4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0fb      	beq.n	80006c4 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 80006cc:	2107      	movs	r1, #7
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fe94 	bl	80003fc <fetchBleEvent>
 80006d4:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80006dc:	2207      	movs	r2, #7
 80006de:	4912      	ldr	r1, [pc, #72]	; (8000728 <setConnectable+0xf8>)
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff15 	bl	8000510 <checkEventResp>
 80006e6:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d106      	bne.n	80006fc <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <setConnectable+0xfc>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <setConnectable+0xfc>)
 80006fa:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f003 f82b 	bl	8003758 <free>
	   free(discoverableCommand);
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f003 f828 	bl	8003758 <free>
	   free(localname);
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f003 f825 	bl	8003758 <free>
	   HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f001 f880 	bl	8001814 <HAL_Delay>
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	200000ec 	.word	0x200000ec
 8000720:	20000078 	.word	0x20000078
 8000724:	200002d0 	.word	0x200002d0
 8000728:	20000088 	.word	0x20000088
 800072c:	200002ca 	.word	0x200002ca

08000730 <BLE_command>:

int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff ff0b 	bl	800055c <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	005a      	lsls	r2, r3, #1
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4413      	add	r3, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fffa 	bl	8003748 <malloc>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <BLE_command+0x90>)
 800075a:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000760:	e007      	b.n	8000772 <BLE_command+0x42>
		   contatore++;
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3301      	adds	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	f247 5230 	movw	r2, #30000	; 0x7530
 800076e:	4293      	cmp	r3, r2
 8000770:	dc07      	bgt.n	8000782 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <BLE_command+0x94>)
 8000776:	f001 fb4d 	bl	8001e14 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f0      	beq.n	8000762 <BLE_command+0x32>
 8000780:	e000      	b.n	8000784 <BLE_command+0x54>
			   break;
 8000782:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <BLE_command+0x90>)
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	005a      	lsls	r2, r3, #1
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4619      	mov	r1, r3
 8000792:	f7ff fe33 	bl	80003fc <fetchBleEvent>
 8000796:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d107      	bne.n	80007ae <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <BLE_command+0x90>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff feb2 	bl	8000510 <checkEventResp>
 80007ac:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f001 f830 	bl	8001814 <HAL_Delay>


	return response;
 80007b4:	697b      	ldr	r3, [r7, #20]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200002cc 	.word	0x200002cc
 80007c4:	48001000 	.word	0x48001000

080007c8 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <addService+0x60>)
 80007d6:	2210      	movs	r2, #16
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 faf1 	bl	8003dc2 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <addService+0x64>)
 80007e6:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80007e8:	2301      	movs	r3, #1
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2307      	movs	r3, #7
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <addService+0x68>)
 80007f0:	2117      	movs	r1, #23
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <addService+0x64>)
 80007f4:	f7ff ff9c 	bl	8000730 <BLE_command>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10a      	bne.n	8000814 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <addService+0x6c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	79da      	ldrb	r2, [r3, #7]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <addService+0x6c>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	7a12      	ldrb	r2, [r2, #8]
 8000812:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <addService+0x6c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f002 ff9d 	bl	8003758 <free>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000095 	.word	0x20000095
 800082c:	20000090 	.word	0x20000090
 8000830:	200000a8 	.word	0x200000a8
 8000834:	200002cc 	.word	0x200002cc

08000838 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af02      	add	r7, sp, #8
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <addCharacteristic+0x74>)
 8000848:	2210      	movs	r2, #16
 800084a:	68f9      	ldr	r1, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fab8 	bl	8003dc2 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <addCharacteristic+0x78>)
 8000858:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	785a      	ldrb	r2, [r3, #1]
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <addCharacteristic+0x78>)
 8000860:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <addCharacteristic+0x78>)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000868:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <addCharacteristic+0x78>)
 800086a:	7e3b      	ldrb	r3, [r7, #24]
 800086c:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800086e:	2301      	movs	r3, #1
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2307      	movs	r3, #7
 8000874:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <addCharacteristic+0x7c>)
 8000876:	211e      	movs	r1, #30
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <addCharacteristic+0x78>)
 800087a:	f7ff ff59 	bl	8000730 <BLE_command>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <addCharacteristic+0x80>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	79da      	ldrb	r2, [r3, #7]
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <addCharacteristic+0x80>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	3301      	adds	r3, #1
 8000896:	7a12      	ldrb	r2, [r2, #8]
 8000898:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <addCharacteristic+0x80>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 ff5a 	bl	8003758 <free>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000b7 	.word	0x200000b7
 80008b0:	200000b0 	.word	0x200000b0
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	200002cc 	.word	0x200002cc

080008bc <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3306      	adds	r3, #6
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <updateCharValue+0x9c>)
 80008d4:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <updateCharValue+0x9c>)
 80008dc:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	785a      	ldrb	r2, [r3, #1]
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <updateCharValue+0x9c>)
 80008e4:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <updateCharValue+0x9c>)
 80008ec:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	785a      	ldrb	r2, [r3, #1]
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <updateCharValue+0x9c>)
 80008f4:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <updateCharValue+0x9c>)
 80008fc:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <updateCharValue+0x9c>)
 8000904:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	330a      	adds	r3, #10
 800090a:	4618      	mov	r0, r3
 800090c:	f002 ff1c 	bl	8003748 <malloc>
 8000910:	4603      	mov	r3, r0
 8000912:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000914:	220a      	movs	r2, #10
 8000916:	4910      	ldr	r1, [pc, #64]	; (8000958 <updateCharValue+0x9c>)
 8000918:	6978      	ldr	r0, [r7, #20]
 800091a:	f003 fa52 	bl	8003dc2 <memcpy>
	memcpy(commandComplete+10,data,size);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	330a      	adds	r3, #10
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	6a39      	ldr	r1, [r7, #32]
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fa4b 	bl	8003dc2 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f103 010a 	add.w	r1, r3, #10
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2307      	movs	r3, #7
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <updateCharValue+0xa0>)
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff fef8 	bl	8000730 <BLE_command>

	free(commandComplete);
 8000940:	6978      	ldr	r0, [r7, #20]
 8000942:	f002 ff09 	bl	8003758 <free>
	free(rxEvent);
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <updateCharValue+0xa4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f002 ff04 	bl	8003758 <free>
}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000d8 	.word	0x200000d8
 800095c:	200000d0 	.word	0x200000d0
 8000960:	200002cc 	.word	0x200002cc

08000964 <i2c_init>:

#include <stm32l475xx.h>


void i2c_init()
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	// Enable clock for I2C2 peripheral and GPIOB
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN; // Enable I2C2 clock
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <i2c_init+0xbc>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096c:	4a2c      	ldr	r2, [pc, #176]	; (8000a20 <i2c_init+0xbc>)
 800096e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000972:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable GPIOB clock
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <i2c_init+0xbc>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <i2c_init+0xbc>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->CR |= RCC_CR_HSION; // Enable msi16 clock
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <i2c_init+0xbc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <i2c_init+0xbc>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	6013      	str	r3, [r2, #0]

	// Configure PB10 and PB11 for alternate function open-drain (I2C)
	GPIOB->MODER &= ~(GPIO_MODER_MODER10 | GPIO_MODER_MODER11); // Clear mode bits for PB10 and PB11
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <i2c_init+0xc0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <i2c_init+0xc0>)
 8000992:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000996:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER10_1 | GPIO_MODER_MODER11_1; // Set alternate function mode for PB10 and PB11
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <i2c_init+0xc0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <i2c_init+0xc0>)
 800099e:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 80009a2:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= GPIO_OTYPER_OT_10 | GPIO_OTYPER_OT_11; // Set PB10 and PB11 as open-drain
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <i2c_init+0xc0>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <i2c_init+0xc0>)
 80009aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80009ae:	6053      	str	r3, [r2, #4]

    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11); // Clear pull-up/pull-down bits
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <i2c_init+0xc0>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <i2c_init+0xc0>)
 80009b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80009ba:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= GPIO_PUPDR_PUPDR10_0 | GPIO_PUPDR_PUPDR11_0; // Set PB10 and PB11 with pull-up
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <i2c_init+0xc0>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <i2c_init+0xc0>)
 80009c2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80009c6:	60d3      	str	r3, [r2, #12]


    GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10; // Clear bits for PB10 and PB11
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <i2c_init+0xc0>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <i2c_init+0xc0>)
 80009ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009d2:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2; // set PB10 and PB11 to AF4
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <i2c_init+0xc0>)
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <i2c_init+0xc0>)
 80009da:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80009de:	6253      	str	r3, [r2, #36]	; 0x24

    I2C2->CR1 &= ~I2C_CR1_PE; // Disable I2C2 peripheral to configure it
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <i2c_init+0xc4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <i2c_init+0xc4>)
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
    RCC->CCIPR |= RCC_CCIPR_I2C2SEL_1; // set to HSI which is 16 MHz at restart
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <i2c_init+0xbc>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <i2c_init+0xbc>)
 80009f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    // optional noise filter

    // setting up I2C2 timing register for f = 4 MHz --> 100 kHz baud rate
    I2C2->TIMINGR |= (0x3 << I2C_TIMINGR_PRESC_Pos) | (0x4 << I2C_TIMINGR_SCLDEL_Pos) | (0x2 << I2C_TIMINGR_SDADEL_Pos)
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <i2c_init+0xc4>)
 80009fe:	691a      	ldr	r2, [r3, #16]
 8000a00:	4909      	ldr	r1, [pc, #36]	; (8000a28 <i2c_init+0xc4>)
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <i2c_init+0xc8>)
 8000a04:	4313      	orrs	r3, r2
 8000a06:	610b      	str	r3, [r1, #16]
    				| (0xF << I2C_TIMINGR_SCLH_Pos) | (0x13 << I2C_TIMINGR_SCLL_Pos);

    I2C2->CR1 |= I2C_CR1_PE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <i2c_init+0xc4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <i2c_init+0xc4>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]

    // Set I2C mode to Master
//    I2C2->CR2 &= ~I2C_CR2_RD_WRN; // Write to slave
//    I2C2->CR2 &= ~I2C_CR2_ADD10; // 7-bit addressing mode
//    I2C2->CR2 |= I2C_CR2_HEAD10R; // 7 bit addressing standard; address --> dir bit
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000400 	.word	0x48000400
 8000a28:	40005800 	.word	0x40005800
 8000a2c:	30420f13 	.word	0x30420f13

08000a30 <i2c_transaction>:

// for sending less than 255 bytes
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	603a      	str	r2, [r7, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	71bb      	strb	r3, [r7, #6]
 8000a42:	4613      	mov	r3, r2
 8000a44:	717b      	strb	r3, [r7, #5]


    	// set read/write, addressing, secondary slave address, nbytes, reload=0, auto end=1, start
//    I2C2->CR2 |= (0x00 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
//    		(len << I2C_CR2_NBYTES_Pos) | (I2C_CR2_START) | (I2C_CR2_AUTOEND);
    if (dir == 0){
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d12d      	bne.n	8000aa8 <i2c_transaction+0x78>
    	// write 1 byte register address, 1 byte data
    	I2C2->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_START | I2C_CR2_RD_WRN);
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <i2c_transaction+0xec>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <i2c_transaction+0xec>)
 8000a52:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000a56:	f423 531c 	bic.w	r3, r3, #9984	; 0x2700
 8000a5a:	6053      	str	r3, [r2, #4]
        I2C2->CR2 |= (0x00 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <i2c_transaction+0xec>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	0051      	lsls	r1, r2, #1
        		(len << I2C_CR2_NBYTES_Pos) | (I2C_CR2_START) | (I2C_CR2_AUTOEND);
 8000a64:	797a      	ldrb	r2, [r7, #5]
 8000a66:	0412      	lsls	r2, r2, #16
        I2C2->CR2 |= (0x00 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <i2c_transaction+0xec>)
 8000a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a76:	6053      	str	r3, [r2, #4]
    	for (uint8_t i = 0; i < len; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e00f      	b.n	8000a9e <i2c_transaction+0x6e>
        	while ((I2C2->ISR & I2C_ISR_TXIS) != I2C_ISR_TXIS);
 8000a7e:	bf00      	nop
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <i2c_transaction+0xec>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d1f9      	bne.n	8000a80 <i2c_transaction+0x50>
    		I2C2->TXDR = data[i];
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <i2c_transaction+0xec>)
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
    	for (uint8_t i = 0; i < len; i++) {
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	797b      	ldrb	r3, [r7, #5]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3eb      	bcc.n	8000a7e <i2c_transaction+0x4e>
 8000aa6:	e032      	b.n	8000b0e <i2c_transaction+0xde>
    		}
    } else if (dir == 1){
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d12f      	bne.n	8000b0e <i2c_transaction+0xde>
//    	while ((I2C2->ISR & I2C_ISR_TXIS) != I2C_ISR_TXIS);
//    	I2C2->TXDR = data[0];

    	// did not follow Texas instruments guide; also need to reset bits before setting in each read/write

    	I2C2->CR2 &= ~(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_START | I2C_CR2_RD_WRN);
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <i2c_transaction+0xec>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <i2c_transaction+0xec>)
 8000ab4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000ab8:	f423 531c 	bic.w	r3, r3, #9984	; 0x2700
 8000abc:	6053      	str	r3, [r2, #4]
    	I2C2->CR2 |= (0x01 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <i2c_transaction+0xec>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	0052      	lsls	r2, r2, #1
 8000ac6:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    	    		(len << I2C_CR2_NBYTES_Pos) | (I2C_CR2_START) | (I2C_CR2_AUTOEND);
 8000aca:	797a      	ldrb	r2, [r7, #5]
 8000acc:	0412      	lsls	r2, r2, #16
    	I2C2->CR2 |= (0x01 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <i2c_transaction+0xec>)
 8000ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000adc:	6053      	str	r3, [r2, #4]

    	// read 2 bytes?
    	for (uint8_t i = 0; i < len; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73bb      	strb	r3, [r7, #14]
 8000ae2:	e010      	b.n	8000b06 <i2c_transaction+0xd6>
    		while ((I2C2->ISR & I2C_ISR_RXNE) != I2C_ISR_RXNE);
 8000ae4:	bf00      	nop
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <i2c_transaction+0xec>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d1f9      	bne.n	8000ae6 <i2c_transaction+0xb6>
    		data[i] = I2C2 -> RXDR;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <i2c_transaction+0xec>)
 8000af4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	b2ca      	uxtb	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
    	for (uint8_t i = 0; i < len; i++){
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	3301      	adds	r3, #1
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	7bba      	ldrb	r2, [r7, #14]
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3ea      	bcc.n	8000ae4 <i2c_transaction+0xb4>
    	}
    }
}
 8000b0e:	bf00      	nop
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40005800 	.word	0x40005800

08000b20 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* Enable the GPIOA clock */
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <leds_init+0xd0>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <leds_init+0xd0>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b3a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b3e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000b40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000b50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b5a:	f023 0320 	bic.w	r3, r3, #32
 8000b5e:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000b60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b6e:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000b70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b7a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000b7e:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b8a:	f023 0320 	bic.w	r3, r3, #32
 8000b8e:	6153      	str	r3, [r2, #20]


  /* Enable the GPIOB clock */
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <leds_init+0xd0>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <leds_init+0xd0>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure PB14 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <leds_init+0xd4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <leds_init+0xd4>)
 8000ba2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000ba6:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <leds_init+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <leds_init+0xd4>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <leds_init+0xd4>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <leds_init+0xd4>)
 8000bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bbe:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <leds_init+0xd4>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <leds_init+0xd4>)
 8000bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bca:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode for PB14 */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <leds_init+0xd4>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <leds_init+0xd4>)
 8000bd2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000bd6:	6093      	str	r3, [r2, #8]

  /* Turn off the second LED on PB14 */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <leds_init+0xd4>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <leds_init+0xd4>)
 8000bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000be2:	6153      	str	r3, [r2, #20]

}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <leds_set>:


void leds_set(uint8_t led)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  // Check if rightmost bit is set to 1
  if (led & 0x01) {
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d008      	beq.n	8000c1e <leds_set+0x26>
	  GPIOA->ODR |= GPIO_ODR_OD5; // Turn on LED1 (set bit 5)
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c16:	f043 0320 	orr.w	r3, r3, #32
 8000c1a:	6153      	str	r3, [r2, #20]
 8000c1c:	e007      	b.n	8000c2e <leds_set+0x36>
  } else {
	  GPIOA->ODR &= ~GPIO_ODR_OD5; // Turn off LED1 (clear bit 5)
 8000c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c28:	f023 0320 	bic.w	r3, r3, #32
 8000c2c:	6153      	str	r3, [r2, #20]
  }

  // Check if next rightmost bit is set to 1
  if (led & 0x02) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <leds_set+0x4e>
	  GPIOB->ODR |= GPIO_ODR_OD14; // Turn on LED2 (set bit 14 on GPIO B)
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <leds_set+0x68>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <leds_set+0x68>)
 8000c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c42:	6153      	str	r3, [r2, #20]
  } else {
	  GPIOB->ODR &= ~GPIO_ODR_OD14; // Turn off LED2 (clear bit 14 on GPIO B
  }
}
 8000c44:	e005      	b.n	8000c52 <leds_set+0x5a>
	  GPIOB->ODR &= ~GPIO_ODR_OD14; // Turn off LED2 (clear bit 14 on GPIO B
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <leds_set+0x68>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <leds_set+0x68>)
 8000c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c50:	6153      	str	r3, [r2, #20]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	48000400 	.word	0x48000400

08000c64 <lsm6dsl_init>:
uint8_t accelerometer = 0b1101010;
uint8_t CTRL1_XL = 0x10;
uint8_t INT1_CTRL = 0x0D;
uint8_t CTRL2_G = 0x11;

void lsm6dsl_init(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	//	CTRL1->XL = 0X60;
	//	INT1->CTRL = 0X01;
	//	CTRL1->XL = 0X60;
	//	INT1->CTRL = 0X02;

	i2c_init();
 8000c6a:	f7ff fe7b 	bl	8000964 <i2c_init>
	// i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len)

	//EXTI setup
//	GPIOD->M
	// turn on accelerometer 1.6-12.5 Hz (low performance), data-ready interrupt
	uint8_t data[2] = {CTRL1_XL, 0xB0};
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <lsm6dsl_init+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	713b      	strb	r3, [r7, #4]
 8000c74:	23b0      	movs	r3, #176	; 0xb0
 8000c76:	717b      	strb	r3, [r7, #5]
	i2c_transaction(accelerometer, 0x00, data, 0x02);
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <lsm6dsl_init+0x48>)
 8000c7a:	7818      	ldrb	r0, [r3, #0]
 8000c7c:	1d3a      	adds	r2, r7, #4
 8000c7e:	2302      	movs	r3, #2
 8000c80:	2100      	movs	r1, #0
 8000c82:	f7ff fed5 	bl	8000a30 <i2c_transaction>

	uint8_t data2[2] = {INT1_CTRL, 0x01};
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <lsm6dsl_init+0x4c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	703b      	strb	r3, [r7, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	707b      	strb	r3, [r7, #1]
	i2c_transaction(accelerometer, 0x00, data2, 0x02);
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <lsm6dsl_init+0x48>)
 8000c92:	7818      	ldrb	r0, [r3, #0]
 8000c94:	463a      	mov	r2, r7
 8000c96:	2302      	movs	r3, #2
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f7ff fec9 	bl	8000a30 <i2c_transaction>


}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000125 	.word	0x20000125
 8000cac:	20000124 	.word	0x20000124
 8000cb0:	20000126 	.word	0x20000126

08000cb4 <lsm6dsl_read_xyz>:




void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	; 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]

	uint8_t OUTX_L_XL = 0x28;
 8000cc0:	2328      	movs	r3, #40	; 0x28
 8000cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t OUTX_H_XL = 0x29;
 8000cc6:	2329      	movs	r3, #41	; 0x29
 8000cc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	uint8_t OUTY_L_XL = 0x2A;
 8000ccc:	232a      	movs	r3, #42	; 0x2a
 8000cce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t OUTY_H_XL = 0x2B;
 8000cd2:	232b      	movs	r3, #43	; 0x2b
 8000cd4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t OUTZ_L_XL = 0x2C;
 8000cd8:	232c      	movs	r3, #44	; 0x2c
 8000cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t OUTZ_H_XL = 0x2D;
 8000cde:	232d      	movs	r3, #45	; 0x2d
 8000ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	uint8_t xL[1] = {OUTX_L_XL};
 8000ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ce8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t xH[1] = {OUTX_H_XL};
 8000cec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t yL[1] = {OUTY_L_XL};
 8000cf4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cf8:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t yH[1] = {OUTY_H_XL};
 8000cfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d00:	773b      	strb	r3, [r7, #28]
	uint8_t zL[1] = {OUTZ_L_XL};
 8000d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d06:	763b      	strb	r3, [r7, #24]
	uint8_t zH[1] = {OUTZ_H_XL};
 8000d08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d0c:	753b      	strb	r3, [r7, #20]

	// read accelerometer data
	i2c_transaction(accelerometer, 0x00, xL, 0x01);
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d10:	7818      	ldrb	r0, [r3, #0]
 8000d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d16:	2301      	movs	r3, #1
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f7ff fe89 	bl	8000a30 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, xL, 0x01);
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d20:	7818      	ldrb	r0, [r3, #0]
 8000d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d26:	2301      	movs	r3, #1
 8000d28:	2101      	movs	r1, #1
 8000d2a:	f7ff fe81 	bl	8000a30 <i2c_transaction>

	i2c_transaction(accelerometer, 0x00, xH, 0x01);
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d30:	7818      	ldrb	r0, [r3, #0]
 8000d32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d36:	2301      	movs	r3, #1
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f7ff fe79 	bl	8000a30 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, xH, 0x01);
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d40:	7818      	ldrb	r0, [r3, #0]
 8000d42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d46:	2301      	movs	r3, #1
 8000d48:	2101      	movs	r1, #1
 8000d4a:	f7ff fe71 	bl	8000a30 <i2c_transaction>

	i2c_transaction(accelerometer, 0x00, yL, 0x01);
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d50:	7818      	ldrb	r0, [r3, #0]
 8000d52:	f107 0220 	add.w	r2, r7, #32
 8000d56:	2301      	movs	r3, #1
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f7ff fe69 	bl	8000a30 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, yL, 0x01);
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d60:	7818      	ldrb	r0, [r3, #0]
 8000d62:	f107 0220 	add.w	r2, r7, #32
 8000d66:	2301      	movs	r3, #1
 8000d68:	2101      	movs	r1, #1
 8000d6a:	f7ff fe61 	bl	8000a30 <i2c_transaction>

	i2c_transaction(accelerometer, 0x00, yH, 0x01);
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d70:	7818      	ldrb	r0, [r3, #0]
 8000d72:	f107 021c 	add.w	r2, r7, #28
 8000d76:	2301      	movs	r3, #1
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f7ff fe59 	bl	8000a30 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, yH, 0x01);
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d80:	7818      	ldrb	r0, [r3, #0]
 8000d82:	f107 021c 	add.w	r2, r7, #28
 8000d86:	2301      	movs	r3, #1
 8000d88:	2101      	movs	r1, #1
 8000d8a:	f7ff fe51 	bl	8000a30 <i2c_transaction>

	i2c_transaction(accelerometer, 0x00, zL, 0x01);
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000d90:	7818      	ldrb	r0, [r3, #0]
 8000d92:	f107 0218 	add.w	r2, r7, #24
 8000d96:	2301      	movs	r3, #1
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f7ff fe49 	bl	8000a30 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, zL, 0x01);
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000da0:	7818      	ldrb	r0, [r3, #0]
 8000da2:	f107 0218 	add.w	r2, r7, #24
 8000da6:	2301      	movs	r3, #1
 8000da8:	2101      	movs	r1, #1
 8000daa:	f7ff fe41 	bl	8000a30 <i2c_transaction>

	i2c_transaction(accelerometer, 0x00, zH, 0x01);
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000db0:	7818      	ldrb	r0, [r3, #0]
 8000db2:	f107 0214 	add.w	r2, r7, #20
 8000db6:	2301      	movs	r3, #1
 8000db8:	2100      	movs	r1, #0
 8000dba:	f7ff fe39 	bl	8000a30 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, zH, 0x01);
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <lsm6dsl_read_xyz+0x160>)
 8000dc0:	7818      	ldrb	r0, [r3, #0]
 8000dc2:	f107 0214 	add.w	r2, r7, #20
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2101      	movs	r1, #1
 8000dca:	f7ff fe31 	bl	8000a30 <i2c_transaction>

	// store values with type casting
	*x = (int16_t)(((uint16_t)xH[0] << 8) | xL[0]);
 8000dce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)(((uint16_t)yH[0] << 8) | yL[0]);
 8000de4:	7f3b      	ldrb	r3, [r7, #28]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)(((uint16_t)zH[0] << 8) | zL[0]);
 8000df8:	7d3b      	ldrb	r3, [r7, #20]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	7e3b      	ldrb	r3, [r7, #24]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	801a      	strh	r2, [r3, #0]

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000124 	.word	0x20000124

08000e18 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e24:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e34:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e38:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00b      	beq.n	8000e58 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e40:	e000      	b.n	8000e44 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e42:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f9      	beq.n	8000e42 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e4e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);

// redefine libc _write() function
int _write(int file, char *ptr, int len) {
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e009      	b.n	8000e90 <_write+0x2a>
		ITM_SendChar(*ptr++);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ffc7 	bl	8000e18 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf1      	blt.n	8000e7c <_write+0x16>
	}
	return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <TIM2_IRQHandler>:
int16_t x, y, z;
uint32_t pattern1 = 0b010100100100;
uint32_t pattern2 = 0b101000010001;

void TIM2_IRQHandler()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if (inplace > 60 ) {
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <TIM2_IRQHandler+0x9c>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	2b3c      	cmp	r3, #60	; 0x3c
 8000eb0:	d936      	bls.n	8000f20 <TIM2_IRQHandler+0x7c>
		led1 = (pattern1 >> (11-cnt)) & 1;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <TIM2_IRQHandler+0xa0>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <TIM2_IRQHandler+0xa4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f1c3 030b 	rsb	r3, r3, #11
 8000ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <TIM2_IRQHandler+0xa8>)
 8000ec8:	6013      	str	r3, [r2, #0]
		led2 = (pattern2 >> (11-cnt)) & 1;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <TIM2_IRQHandler+0xac>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <TIM2_IRQHandler+0xa4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f1c3 030b 	rsb	r3, r3, #11
 8000ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <TIM2_IRQHandler+0xb0>)
 8000ee0:	6013      	str	r3, [r2, #0]

		leds_set((led2 << 1) + led1);
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <TIM2_IRQHandler+0xb0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <TIM2_IRQHandler+0xa8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe7e 	bl	8000bf8 <leds_set>

		if (cnt == 11) {cnt = 0;}
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <TIM2_IRQHandler+0xa4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b0b      	cmp	r3, #11
 8000f02:	d103      	bne.n	8000f0c <TIM2_IRQHandler+0x68>
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <TIM2_IRQHandler+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e004      	b.n	8000f16 <TIM2_IRQHandler+0x72>
		else{cnt += 1;}
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <TIM2_IRQHandler+0xa4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <TIM2_IRQHandler+0xa4>)
 8000f14:	6013      	str	r3, [r2, #0]
//		leds_set(0);

		timer_reset(TIM2);
 8000f16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f1a:	f000 fbc9 	bl	80016b0 <timer_reset>
 8000f1e:	e006      	b.n	8000f2e <TIM2_IRQHandler+0x8a>
	} else {
		leds_set(0);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fe69 	bl	8000bf8 <leds_set>
		timer_reset(TIM2);
 8000f26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f2a:	f000 fbc1 	bl	80016b0 <timer_reset>
	}
	inplace++;
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <TIM2_IRQHandler+0x9c>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <TIM2_IRQHandler+0x9c>)
 8000f3a:	801a      	strh	r2, [r3, #0]

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000344 	.word	0x20000344
 8000f44:	20000128 	.word	0x20000128
 8000f48:	20000338 	.word	0x20000338
 8000f4c:	2000033c 	.word	0x2000033c
 8000f50:	2000012c 	.word	0x2000012c
 8000f54:	20000340 	.word	0x20000340

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af02      	add	r7, sp, #8
	  leds_init();
 8000f5e:	f7ff fddf 	bl	8000b20 <leds_init>
	  lsm6dsl_init();
 8000f62:	f7ff fe7f 	bl	8000c64 <lsm6dsl_init>

	  printf("finished \n");
 8000f66:	4851      	ldr	r0, [pc, #324]	; (80010ac <main+0x154>)
 8000f68:	f002 fdc0 	bl	8003aec <puts>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000f6c:	f000 fbdd 	bl	800172a <HAL_Init>

  /* Configure the system clock */
	  SystemClock_Config();
 8000f70:	f000 f8ae 	bl	80010d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000f74:	f000 f930 	bl	80011d8 <MX_GPIO_Init>
	  MX_SPI3_Init();
 8000f78:	f000 f8f0 	bl	800115c <MX_SPI3_Init>

  //RESET BLE MODULE
	  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 ff5d 	bl	8001e44 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f000 fc42 	bl	8001814 <HAL_Delay>
	  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f000 ff53 	bl	8001e44 <HAL_GPIO_WritePin>

	  ble_init();
 8000f9e:	f7ff f913 	bl	80001c8 <ble_init>
	  timer_init(TIM2);
 8000fa2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fa6:	f000 fb4f 	bl	8001648 <timer_init>


	  HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 fc32 	bl	8001814 <HAL_Delay>

	  uint8_t standby = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	75bb      	strb	r3, [r7, #22]

	  uint8_t init = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	75fb      	strb	r3, [r7, #23]

	  while (1)
	  {
		  lsm6dsl_read_xyz(&x, &y, &z);
 8000fb8:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <main+0x158>)
 8000fba:	493e      	ldr	r1, [pc, #248]	; (80010b4 <main+0x15c>)
 8000fbc:	483e      	ldr	r0, [pc, #248]	; (80010b8 <main+0x160>)
 8000fbe:	f7ff fe79 	bl	8000cb4 <lsm6dsl_read_xyz>
		  // x < 10024 && x > -10024 && y < 10024 && y > -10024 && z < 1024 && z > -1024
		  if (x < 1024 && x > -1024 && y < 1024 && y > -1024) {
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <main+0x160>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fcc:	da21      	bge.n	8001012 <main+0xba>
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <main+0x160>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8000fd8:	dd1b      	ble.n	8001012 <main+0xba>
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <main+0x15c>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe4:	da15      	bge.n	8001012 <main+0xba>
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <main+0x15c>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8000ff0:	dd0f      	ble.n	8001012 <main+0xba>
			  // prevent overflow from inplace incrementing
			  if (inplace > 60) {
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <main+0x164>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2b3c      	cmp	r3, #60	; 0x3c
 8000ffa:	d92c      	bls.n	8001056 <main+0xfe>
//				  printf("inplace: %d, x: %d, y: %d, z: %d\n", inplace, x, y, z);
				  inplace = 60;
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <main+0x164>)
 8000ffe:	223c      	movs	r2, #60	; 0x3c
 8001000:	801a      	strh	r2, [r3, #0]
				  // turn on BLE
				  if (!init) {
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d126      	bne.n	8001056 <main+0xfe>
					  ble_init();
 8001008:	f7ff f8de 	bl	80001c8 <ble_init>
					  init = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	75fb      	strb	r3, [r7, #23]
			  if (inplace > 60) {
 8001010:	e021      	b.n	8001056 <main+0xfe>
				  }
			  }
		  } else {
			  inplace = 0;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <main+0x164>)
 8001014:	2200      	movs	r2, #0
 8001016:	801a      	strh	r2, [r3, #0]
			  if (init) {
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01c      	beq.n	8001058 <main+0x100>
				  // turn off BLE to disconnect..
				  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f000 ff0c 	bl	8001e44 <HAL_GPIO_WritePin>
				  HAL_Delay(10);
 800102c:	200a      	movs	r0, #10
 800102e:	f000 fbf1 	bl	8001814 <HAL_Delay>
				  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 ff02 	bl	8001e44 <HAL_GPIO_WritePin>

				  // put into sleep mode
				  HAL_SuspendTick();
 8001040:	f000 fc0c 	bl	800185c <HAL_SuspendTick>
				  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8001044:	2101      	movs	r1, #1
 8001046:	2000      	movs	r0, #0
 8001048:	f000 ff38 	bl	8001ebc <HAL_PWR_EnterSLEEPMode>
				  HAL_ResumeTick();
 800104c:	f000 fc16 	bl	800187c <HAL_ResumeTick>
				  init = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
 8001054:	e000      	b.n	8001058 <main+0x100>
			  if (inplace > 60) {
 8001056:	bf00      	nop
			  }
		  }

		  // run this when BLE is initialized
		  if (init) {
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d023      	beq.n	80010a6 <main+0x14e>
			  if(!standby && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <main+0x120>
 8001064:	2140      	movs	r1, #64	; 0x40
 8001066:	4816      	ldr	r0, [pc, #88]	; (80010c0 <main+0x168>)
 8001068:	f000 fed4 	bl	8001e14 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <main+0x120>
				  catchBLE();
 8001072:	f7ff fabf 	bl	80005f4 <catchBLE>
 8001076:	e016      	b.n	80010a6 <main+0x14e>
			  } else {
				  HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f000 fbca 	bl	8001814 <HAL_Delay>
				  // Send a string to the NORDIC UART service, remember to not include the newline
				  unsigned char test_str[] = "youlostit BLE test";
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <main+0x16c>)
 8001082:	463c      	mov	r4, r7
 8001084:	461d      	mov	r5, r3
 8001086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	8022      	strh	r2, [r4, #0]
 8001090:	3402      	adds	r4, #2
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	7023      	strb	r3, [r4, #0]
				  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8001096:	463b      	mov	r3, r7
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2312      	movs	r3, #18
 800109c:	2200      	movs	r2, #0
 800109e:	490a      	ldr	r1, [pc, #40]	; (80010c8 <main+0x170>)
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <main+0x174>)
 80010a2:	f7ff fc0b 	bl	80008bc <updateCharValue>
			  }
		  }

		  // Wait for interrupt, only uncomment if low power is needed
		  __WFI();
 80010a6:	bf30      	wfi
		  lsm6dsl_read_xyz(&x, &y, &z);
 80010a8:	e786      	b.n	8000fb8 <main+0x60>
 80010aa:	bf00      	nop
 80010ac:	08004104 	.word	0x08004104
 80010b0:	2000034a 	.word	0x2000034a
 80010b4:	20000348 	.word	0x20000348
 80010b8:	20000346 	.word	0x20000346
 80010bc:	20000344 	.word	0x20000344
 80010c0:	48001000 	.word	0x48001000
 80010c4:	08004110 	.word	0x08004110
 80010c8:	200002c8 	.word	0x200002c8
 80010cc:	200002c0 	.word	0x200002c0

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b096      	sub	sp, #88	; 0x58
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2244      	movs	r2, #68	; 0x44
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fde4 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010f6:	f000 ff23 	bl	8001f40 <HAL_PWREx_ControlVoltageScaling>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001100:	f000 f902 	bl	8001308 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001110:	2370      	movs	r3, #112	; 0x70
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001114:	2300      	movs	r3, #0
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4618      	mov	r0, r3
 800111e:	f000 ffad 	bl	800207c <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001128:	f000 f8ee 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fb75 	bl	8002834 <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001150:	f000 f8da 	bl	8001308 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3758      	adds	r7, #88	; 0x58
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <MX_SPI3_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800116c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001176:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800117a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_SPI3_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_SPI3_Init+0x74>)
 800118a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_SPI3_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SPI3_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_SPI3_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SPI3_Init+0x74>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_SPI3_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_SPI3_Init+0x74>)
 80011b6:	2208      	movs	r2, #8
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_SPI3_Init+0x74>)
 80011bc:	f001 fd26 	bl	8002c0c <HAL_SPI_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 f89f 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002d4 	.word	0x200002d4
 80011d4:	40003c00 	.word	0x40003c00

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b43      	ldr	r3, [pc, #268]	; (80012fc <MX_GPIO_Init+0x124>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a42      	ldr	r2, [pc, #264]	; (80012fc <MX_GPIO_Init+0x124>)
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <MX_GPIO_Init+0x124>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <MX_GPIO_Init+0x124>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <MX_GPIO_Init+0x124>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <MX_GPIO_Init+0x124>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <MX_GPIO_Init+0x124>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a36      	ldr	r2, [pc, #216]	; (80012fc <MX_GPIO_Init+0x124>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b34      	ldr	r3, [pc, #208]	; (80012fc <MX_GPIO_Init+0x124>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <MX_GPIO_Init+0x124>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a30      	ldr	r2, [pc, #192]	; (80012fc <MX_GPIO_Init+0x124>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <MX_GPIO_Init+0x124>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_GPIO_Init+0x124>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <MX_GPIO_Init+0x124>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_GPIO_Init+0x124>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f000 fde9 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_GPIO_Init+0x128>)
 800127a:	f000 fde3 	bl	8001e44 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f000 fddc 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800128c:	2340      	movs	r3, #64	; 0x40
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4818      	ldr	r0, [pc, #96]	; (8001304 <MX_GPIO_Init+0x12c>)
 80012a2:	f000 fc0d 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 80012a6:	f44f 7390 	mov.w	r3, #288	; 0x120
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f000 fbfd 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80012c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4808      	ldr	r0, [pc, #32]	; (8001300 <MX_GPIO_Init+0x128>)
 80012e0:	f000 fbee 	bl	8001ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2017      	movs	r0, #23
 80012ea:	f000 fbb2 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ee:	2017      	movs	r0, #23
 80012f0:	f000 fbcb 	bl	8001a8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000c00 	.word	0x48000c00
 8001304:	48001000 	.word	0x48001000

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	e7fe      	b.n	8001310 <Error_Handler+0x8>
	...

08001314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_MspInit+0x44>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6613      	str	r3, [r2, #96]	; 0x60
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_MspInit+0x44>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x44>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x44>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_SPI_MspInit+0x7c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d128      	bne.n	80013d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_SPI_MspInit+0x80>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_SPI_MspInit+0x80>)
 8001384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_SPI_MspInit+0x80>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_SPI_MspInit+0x80>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_SPI_MspInit+0x80>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_SPI_MspInit+0x80>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c0:	2306      	movs	r3, #6
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_SPI_MspInit+0x84>)
 80013cc:	f000 fb78 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40003c00 	.word	0x40003c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f9d0 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <EXTI9_5_IRQHandler+0x14>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001442:	2040      	movs	r0, #64	; 0x40
 8001444:	f000 fd16 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200002d0 	.word	0x200002d0

08001450 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
	}

return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <_sbrk+0x50>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x16>
		heap_end = &end;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <_sbrk+0x50>)
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <_sbrk+0x54>)
 80014a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <_sbrk+0x50>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <_sbrk+0x50>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	466a      	mov	r2, sp
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d907      	bls.n	80014c6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80014b6:	f002 fc57 	bl	8003d68 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	220c      	movs	r2, #12
 80014be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	e006      	b.n	80014d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <_sbrk+0x50>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a03      	ldr	r2, [pc, #12]	; (80014dc <_sbrk+0x50>)
 80014d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000034c 	.word	0x2000034c
 80014e0:	200004a0 	.word	0x200004a0

080014e4 <_close>:

int _close(int file)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150c:	605a      	str	r2, [r3, #4]
	return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_isatty>:

int _isatty(int file)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <SystemInit+0x64>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <SystemInit+0x64>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <SystemInit+0x68>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <SystemInit+0x68>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <SystemInit+0x68>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <SystemInit+0x68>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <SystemInit+0x68>)
 8001578:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800157c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001580:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <SystemInit+0x68>)
 8001584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001588:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <SystemInit+0x68>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <SystemInit+0x68>)
 8001590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <SystemInit+0x68>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SystemInit+0x64>)
 800159e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a2:	609a      	str	r2, [r3, #8]
#endif
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	40021000 	.word	0x40021000

080015b8 <__NVIC_EnableIRQ>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <timer_init>:

/* Include the type definitions for the timer peripheral */
#include <stm32l475xx.h>

void timer_init(TIM_TypeDef* timer)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	timer->CR1 &= ~TIM_CR1_CEN; // reset count enable
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 0201 	bic.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	601a      	str	r2, [r3, #0]
	timer->CNT = 0; // reset counter
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // enable TIM 2 clock
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <timer_init+0x64>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <timer_init+0x64>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
	timer->PSC = 7999; // set pre scaler to 3999 on APB
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
	timer->ARR = 49; // set auto-reload value to value
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2231      	movs	r2, #49	; 0x31
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM2_IRQn);
 800167c:	201c      	movs	r0, #28
 800167e:	f7ff ff9b 	bl	80015b8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0); // set interrupt to highest priority
 8001682:	2100      	movs	r1, #0
 8001684:	201c      	movs	r0, #28
 8001686:	f7ff ffb5 	bl	80015f4 <__NVIC_SetPriority>

	timer->DIER |= TIM_DIER_UIE; // enable interrupt
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]

	timer->CR1 |= TIM_CR1_CEN; // enable timer
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	timer->CNT = 0; //reset counter
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
	timer->SR &= ~TIM_SR_UIF; //reset update interrupt flag
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f023 0201 	bic.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016dc:	f7ff ff36 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <LoopForever+0xe>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	; (8001724 <LoopForever+0x16>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f002 fb35 	bl	8003d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170a:	f7ff fc25 	bl	8000f58 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800171c:	0800416c 	.word	0x0800416c
  ldr r2, =_sbss
 8001720:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001724:	200004a0 	.word	0x200004a0

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>

0800172a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f981 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f80e 	bl	800175c <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	e001      	b.n	8001750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174c:	f7ff fde2 	bl	8001314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001750:	79fb      	ldrb	r3, [r7, #7]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_InitTick+0x6c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d023      	beq.n	80017b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_InitTick+0x70>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_InitTick+0x6c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f98d 	bl	8001aa6 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d809      	bhi.n	80017ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 f957 	bl	8001a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_InitTick+0x74>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e007      	b.n	80017bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e004      	b.n	80017bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e001      	b.n	80017bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000138 	.word	0x20000138
 80017cc:	20000130 	.word	0x20000130
 80017d0:	20000134 	.word	0x20000134

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000138 	.word	0x20000138
 80017f8:	20000350 	.word	0x20000350

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000350 	.word	0x20000350

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000138 	.word	0x20000138

0800185c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_SuspendTick+0x1c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_SuspendTick+0x1c>)
 8001866:	f023 0302 	bic.w	r3, r3, #2
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_ResumeTick+0x1c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_ResumeTick+0x1c>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <__NVIC_SetPriorityGrouping>:
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <SysTick_Config>:
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff8e 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff29 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff3e 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff8e 	bl	8001990 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5d 	bl	800193c <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff31 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e17f      	b.n	8001dd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8171 	beq.w	8001dca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_GPIO_Init+0x40>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d118      	bne.n	8001ba0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	6939      	ldr	r1, [r7, #16]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80ac 	beq.w	8001dca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c8a:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x338>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x33c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x340>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x344>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x348>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_GPIO_Init+0x34c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x22a>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00c      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x244>
 8001d02:	2300      	movs	r3, #0
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d14:	4937      	ldr	r1, [pc, #220]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d46:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae78 	bne.w	8001ad0 <HAL_GPIO_Init+0x10>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	48000400 	.word	0x48000400
 8001dfc:	48000800 	.word	0x48000800
 8001e00:	48000c00 	.word	0x48000c00
 8001e04:	48001000 	.word	0x48001000
 8001e08:	48001400 	.word	0x48001400
 8001e0c:	48001800 	.word	0x48001800
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f806 	bl	8001ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_PWR_EnterSLEEPMode+0x60>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eda:	d10e      	bne.n	8001efa <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001edc:	f000 f896 	bl	800200c <HAL_PWREx_DisableLowPowerRunMode>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001ee6:	e016      	b.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_PWR_EnterSLEEPMode+0x60>)
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d001      	beq.n	8001efa <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001ef6:	f000 f879 	bl	8001fec <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001f0c:	bf30      	wfi
 8001f0e:	e002      	b.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001f10:	bf40      	sev
    __WFE();
 8001f12:	bf20      	wfe
    __WFE();
 8001f14:	bf20      	wfe
  }

}
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40007000 	.word	0x40007000

08001f40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4e:	d130      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5c:	d038      	beq.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f66:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2232      	movs	r2, #50	; 0x32
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f84:	e002      	b.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f98:	d102      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f2      	bne.n	8001f86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fac:	d110      	bne.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e00f      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbe:	d007      	beq.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	20000130 	.word	0x20000130
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40007000 	.word	0x40007000

0800200c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800201c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2232      	movs	r2, #50	; 0x32
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	3301      	adds	r3, #1
 8002032:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002034:	e002      	b.n	800203c <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3b01      	subs	r3, #1
 800203a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d102      	bne.n	8002050 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f2      	bne.n	8002036 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205c:	d101      	bne.n	8002062 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e000      	b.n	8002064 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40007000 	.word	0x40007000
 8002074:	20000130 	.word	0x20000130
 8002078:	431bde83 	.word	0x431bde83

0800207c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3ca      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4b97      	ldr	r3, [pc, #604]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002098:	4b94      	ldr	r3, [pc, #592]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80e4 	beq.w	8002278 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4a>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	f040 808b 	bne.w	80021d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	f040 8087 	bne.w	80021d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c6:	4b89      	ldr	r3, [pc, #548]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x62>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e3a2      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_RCC_OscConfig+0x7c>
 80020ee:	4b7f      	ldr	r3, [pc, #508]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f6:	e005      	b.n	8002104 <HAL_RCC_OscConfig+0x88>
 80020f8:	4b7c      	ldr	r3, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002104:	4293      	cmp	r3, r2
 8002106:	d223      	bcs.n	8002150 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fd1d 	bl	8002b4c <RCC_SetFlashLatencyFromMSIRange>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e383      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211c:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a72      	ldr	r2, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	496d      	ldr	r1, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213a:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4968      	ldr	r1, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
 800214e:	e025      	b.n	800219c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4960      	ldr	r1, [pc, #384]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	495b      	ldr	r1, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fcdd 	bl	8002b4c <RCC_SetFlashLatencyFromMSIRange>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e343      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800219c:	f000 fc4a 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	4950      	ldr	r1, [pc, #320]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_RCC_OscConfig+0x278>)
 80021ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021bc:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff facb 	bl	800175c <HAL_InitTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d052      	beq.n	8002276 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	e327      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d032      	beq.n	8002242 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a42      	ldr	r2, [pc, #264]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fb08 	bl	80017fc <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f0:	f7ff fb04 	bl	80017fc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e310      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a36      	ldr	r2, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4931      	ldr	r1, [pc, #196]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	492c      	ldr	r1, [pc, #176]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	e01a      	b.n	8002278 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800224e:	f7ff fad5 	bl	80017fc <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002256:	f7ff fad1 	bl	80017fc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e2dd      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x1da>
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002276:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d074      	beq.n	800236e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x21a>
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d10e      	bne.n	80022ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d064      	beq.n	800236c <HAL_RCC_OscConfig+0x2f0>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d160      	bne.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e2ba      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x24a>
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e026      	b.n	8002314 <HAL_RCC_OscConfig+0x298>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ce:	d115      	bne.n	80022fc <HAL_RCC_OscConfig+0x280>
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80022d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a02      	ldr	r2, [pc, #8]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x298>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08004124 	.word	0x08004124
 80022f4:	20000130 	.word	0x20000130
 80022f8:	20000134 	.word	0x20000134
 80022fc:	4ba0      	ldr	r3, [pc, #640]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a9f      	ldr	r2, [pc, #636]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b9d      	ldr	r3, [pc, #628]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a9c      	ldr	r2, [pc, #624]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff fa6e 	bl	80017fc <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff fa6a 	bl	80017fc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e276      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x2a8>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7ff fa5a 	bl	80017fc <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7ff fa56 	bl	80017fc <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e262      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x2d0>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d060      	beq.n	800243c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x310>
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d119      	bne.n	80023ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d116      	bne.n	80023ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238c:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_OscConfig+0x328>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e23f      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4973      	ldr	r1, [pc, #460]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	e040      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d023      	beq.n	800240a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff fa15 	bl	80017fc <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff fa11 	bl	80017fc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e21d      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e8:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b62      	ldr	r3, [pc, #392]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	495f      	ldr	r1, [pc, #380]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
 8002408:	e018      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5c      	ldr	r2, [pc, #368]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff f9f1 	bl	80017fc <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7ff f9ed 	bl	80017fc <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1f9      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d03c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01c      	beq.n	800248a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff f9cc 	bl	80017fc <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff f9c8 	bl	80017fc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1d4      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ef      	beq.n	8002468 <HAL_RCC_OscConfig+0x3ec>
 8002488:	e01b      	b.n	80024c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800248c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002490:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7ff f9af 	bl	80017fc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a2:	f7ff f9ab 	bl	80017fc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e1b7      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ef      	bne.n	80024a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80a6 	beq.w	800261c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	; 0x58
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f8:	2301      	movs	r3, #1
 80024fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d118      	bne.n	800253a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002514:	f7ff f972 	bl	80017fc <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251c:	f7ff f96e 	bl	80017fc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e17a      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x508>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <HAL_RCC_OscConfig+0x4d8>
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002552:	e029      	b.n	80025a8 <HAL_RCC_OscConfig+0x52c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d115      	bne.n	8002588 <HAL_RCC_OscConfig+0x50c>
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_OscConfig+0x504>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x52c>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
 8002588:	4b9c      	ldr	r3, [pc, #624]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a9b      	ldr	r2, [pc, #620]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002598:	4b98      	ldr	r3, [pc, #608]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a97      	ldr	r2, [pc, #604]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff f924 	bl	80017fc <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7ff f920 	bl	80017fc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e12a      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ed      	beq.n	80025b8 <HAL_RCC_OscConfig+0x53c>
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7ff f90d 	bl	80017fc <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7ff f909 	bl	80017fc <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e113      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fc:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1ed      	bne.n	80025e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260a:	7ffb      	ldrb	r3, [r7, #31]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b7a      	ldr	r3, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a79      	ldr	r2, [pc, #484]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80fe 	beq.w	8002822 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	2b02      	cmp	r3, #2
 800262c:	f040 80d0 	bne.w	80027d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002630:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	429a      	cmp	r2, r3
 8002642:	d130      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	3b01      	subs	r3, #1
 8002650:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d127      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002670:	2a07      	cmp	r2, #7
 8002672:	bf14      	ite	ne
 8002674:	2201      	movne	r2, #1
 8002676:	2200      	moveq	r2, #0
 8002678:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267a:	4293      	cmp	r3, r2
 800267c:	d113      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	3b01      	subs	r3, #1
 800268c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d06e      	beq.n	8002784 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d069      	beq.n	8002780 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0ad      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d4:	f7ff f892 	bl	80017fc <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff f88e 	bl	80017fc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e09a      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fa:	4b40      	ldr	r3, [pc, #256]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_RCC_OscConfig+0x784>)
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800270a:	3a01      	subs	r2, #1
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002714:	0212      	lsls	r2, r2, #8
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800271c:	0852      	lsrs	r2, r2, #1
 800271e:	3a01      	subs	r2, #1
 8002720:	0552      	lsls	r2, r2, #21
 8002722:	4311      	orrs	r1, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002728:	0852      	lsrs	r2, r2, #1
 800272a:	3a01      	subs	r2, #1
 800272c:	0652      	lsls	r2, r2, #25
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002734:	0912      	lsrs	r2, r2, #4
 8002736:	0452      	lsls	r2, r2, #17
 8002738:	430a      	orrs	r2, r1
 800273a:	4930      	ldr	r1, [pc, #192]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 800273c:	4313      	orrs	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002758:	f7ff f850 	bl	80017fc <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff f84c 	bl	80017fc <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e058      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277e:	e050      	b.n	8002822 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e04f      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d148      	bne.n	8002822 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027a8:	f7ff f828 	bl	80017fc <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f824 	bl	80017fc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e030      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x734>
 80027ce:	e028      	b.n	8002822 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d023      	beq.n	800281e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <HAL_RCC_OscConfig+0x780>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff f80b 	bl	80017fc <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e8:	e00c      	b.n	8002804 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f807 	bl	80017fc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d905      	bls.n	8002804 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e013      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
 80027fc:	40021000 	.word	0x40021000
 8002800:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_OscConfig+0x7b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1ec      	bne.n	80027ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x7b0>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4905      	ldr	r1, [pc, #20]	; (800282c <HAL_RCC_OscConfig+0x7b0>)
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_OscConfig+0x7b4>)
 8002818:	4013      	ands	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e001      	b.n	8002822 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	feeefffc 	.word	0xfeeefffc

08002834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0e7      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4970      	ldr	r1, [pc, #448]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b6e      	ldr	r3, [pc, #440]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cf      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4960      	ldr	r1, [pc, #384]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04c      	beq.n	800294c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d121      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0a6      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e09a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ea:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e08e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e086      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4943      	ldr	r1, [pc, #268]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe ff6e 	bl	80017fc <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe ff6a 	bl	80017fc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e06e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002964:	429a      	cmp	r2, r3
 8002966:	d208      	bcs.n	800297a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	492b      	ldr	r1, [pc, #172]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d210      	bcs.n	80029aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	4923      	ldr	r1, [pc, #140]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e036      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4918      	ldr	r1, [pc, #96]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4910      	ldr	r1, [pc, #64]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e8:	f000 f824 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	490b      	ldr	r1, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1f4>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1fc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fea5 	bl	800175c <HAL_InitTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08004124 	.word	0x08004124
 8002a2c:	20000130 	.word	0x20000130
 8002a30:	20000134 	.word	0x20000134

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d121      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d11e      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e004      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d134      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0xa6>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002adc:	617b      	str	r3, [r7, #20]
      break;
 8002ade:	e005      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae2:	617b      	str	r3, [r7, #20]
      break;
 8002ae4:	e002      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	617b      	str	r3, [r7, #20]
      break;
 8002aea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	3301      	adds	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	fb03 f202 	mul.w	r2, r3, r2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	0e5b      	lsrs	r3, r3, #25
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08004134 	.word	0x08004134
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200

08002b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b64:	f7ff f9de 	bl	8001f24 <HAL_PWREx_GetVoltageRange>
 8002b68:	6178      	str	r0, [r7, #20]
 8002b6a:	e014      	b.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6593      	str	r3, [r2, #88]	; 0x58
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b84:	f7ff f9ce 	bl	8001f24 <HAL_PWREx_GetVoltageRange>
 8002b88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9c:	d10b      	bne.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d919      	bls.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ba8:	d902      	bls.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002baa:	2302      	movs	r3, #2
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e013      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	e010      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b80      	cmp	r3, #128	; 0x80
 8002bba:	d902      	bls.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e00a      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d102      	bne.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc8:	2302      	movs	r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e004      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d101      	bne.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0207 	bic.w	r2, r3, #7
 8002be0:	4909      	ldr	r1, [pc, #36]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e095      	b.n	8002d4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d108      	bne.n	8002c38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c2e:	d009      	beq.n	8002c44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
 8002c36:	e005      	b.n	8002c44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fb7c 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c84:	d902      	bls.n	8002c8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e002      	b.n	8002c92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c9a:	d007      	beq.n	8002cac <HAL_SPI_Init+0xa0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca4:	d002      	beq.n	8002cac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	ea42 0103 	orr.w	r1, r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	f003 0204 	and.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d28:	ea42 0103 	orr.w	r1, r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_SPI_Transmit+0x22>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e15f      	b.n	8003034 <HAL_SPI_Transmit+0x2e2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d7c:	f7fe fd3e 	bl	80017fc <HAL_GetTick>
 8002d80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d96:	e148      	b.n	800302a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Transmit+0x52>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002da8:	e13f      	b.n	800302a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2203      	movs	r2, #3
 8002dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df4:	d10f      	bne.n	8002e16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d007      	beq.n	8002e34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e3c:	d94f      	bls.n	8002ede <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_Transmit+0xfa>
 8002e46:	8afb      	ldrh	r3, [r7, #22]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d142      	bne.n	8002ed2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e70:	e02f      	b.n	8002ed2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d112      	bne.n	8002ea6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ea4:	e015      	b.n	8002ed2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea6:	f7fe fca9 	bl	80017fc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d803      	bhi.n	8002ebe <HAL_SPI_Transmit+0x16c>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d102      	bne.n	8002ec4 <HAL_SPI_Transmit+0x172>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002ed0:	e0ab      	b.n	800302a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ca      	bne.n	8002e72 <HAL_SPI_Transmit+0x120>
 8002edc:	e080      	b.n	8002fe0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Transmit+0x19a>
 8002ee6:	8afb      	ldrh	r3, [r7, #22]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d174      	bne.n	8002fd6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d912      	bls.n	8002f1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b02      	subs	r3, #2
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f1a:	e05c      	b.n	8002fd6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f42:	e048      	b.n	8002fd6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d12b      	bne.n	8002faa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d912      	bls.n	8002f82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b02      	subs	r3, #2
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f80:	e029      	b.n	8002fd6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fa8:	e015      	b.n	8002fd6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002faa:	f7fe fc27 	bl	80017fc <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d803      	bhi.n	8002fc2 <HAL_SPI_Transmit+0x270>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Transmit+0x276>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002fd4:	e029      	b.n	800302a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1b1      	bne.n	8002f44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fb69 	bl	80036bc <SPI_EndRxTxTransaction>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e003      	b.n	800302a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003032:	7ffb      	ldrb	r3, [r7, #31]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800304a:	2301      	movs	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_SPI_TransmitReceive+0x26>
 800305e:	2302      	movs	r3, #2
 8003060:	e20a      	b.n	8003478 <HAL_SPI_TransmitReceive+0x43c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306a:	f7fe fbc7 	bl	80017fc <HAL_GetTick>
 800306e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003076:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003086:	7efb      	ldrb	r3, [r7, #27]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d00e      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x6e>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003092:	d106      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x66>
 800309c:	7efb      	ldrb	r3, [r7, #27]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d003      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030a8:	e1e0      	b.n	800346c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x80>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x80>
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030c2:	e1d3      	b.n	800346c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d003      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2205      	movs	r2, #5
 80030d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800311a:	d802      	bhi.n	8003122 <HAL_SPI_TransmitReceive+0xe6>
 800311c:	8a3b      	ldrh	r3, [r7, #16]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d908      	bls.n	8003134 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e007      	b.n	8003144 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d007      	beq.n	8003162 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800316a:	f240 8081 	bls.w	8003270 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_SPI_TransmitReceive+0x140>
 8003176:	8a7b      	ldrh	r3, [r7, #18]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d16d      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	1c9a      	adds	r2, r3, #2
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a0:	e05a      	b.n	8003258 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d11b      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x1ac>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x1ac>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d113      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d11c      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x1f4>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	b292      	uxth	r2, r2
 800320e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800322c:	2301      	movs	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003230:	f7fe fae4 	bl	80017fc <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323c:	429a      	cmp	r2, r3
 800323e:	d80b      	bhi.n	8003258 <HAL_SPI_TransmitReceive+0x21c>
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d007      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003256:	e109      	b.n	800346c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d19f      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x166>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d199      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x166>
 800326e:	e0e3      	b.n	8003438 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x244>
 8003278:	8a7b      	ldrh	r3, [r7, #18]
 800327a:	2b01      	cmp	r3, #1
 800327c:	f040 80cf 	bne.w	800341e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d912      	bls.n	80032b0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b02      	subs	r3, #2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ae:	e0b6      	b.n	800341e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d6:	e0a2      	b.n	800341e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d134      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x314>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02f      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x314>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d12c      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d912      	bls.n	8003326 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b02      	subs	r3, #2
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003324:	e012      	b.n	800334c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d148      	bne.n	80033f0 <HAL_SPI_TransmitReceive+0x3b4>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d042      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d923      	bls.n	80033be <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	b292      	uxth	r2, r2
 8003382:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b02      	subs	r3, #2
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d81f      	bhi.n	80033ec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	e016      	b.n	80033ec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f103 020c 	add.w	r2, r3, #12
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ec:	2301      	movs	r3, #1
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033f0:	f7fe fa04 	bl	80017fc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d803      	bhi.n	8003408 <HAL_SPI_TransmitReceive+0x3cc>
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d102      	bne.n	800340e <HAL_SPI_TransmitReceive+0x3d2>
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800341c:	e026      	b.n	800346c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f af57 	bne.w	80032d8 <HAL_SPI_TransmitReceive+0x29c>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f af50 	bne.w	80032d8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f93d 	bl	80036bc <SPI_EndRxTxTransaction>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e003      	b.n	800346c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003490:	f7fe f9b4 	bl	80017fc <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4413      	add	r3, r2
 800349e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a0:	f7fe f9ac 	bl	80017fc <HAL_GetTick>
 80034a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	0d1b      	lsrs	r3, r3, #20
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b6:	e054      	b.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d050      	beq.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c0:	f7fe f99c 	bl	80017fc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d902      	bls.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d13d      	bne.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ee:	d111      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d004      	beq.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d107      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351c:	d10f      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e017      	b.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3b01      	subs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d19b      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000130 	.word	0x20000130

08003590 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035a2:	f7fe f92b 	bl	80017fc <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035b2:	f7fe f923 	bl	80017fc <HAL_GetTick>
 80035b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035c0:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00da      	lsls	r2, r3, #3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	0d1b      	lsrs	r3, r3, #20
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035d8:	e060      	b.n	800369c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035e0:	d107      	bne.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d050      	beq.n	800369c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035fa:	f7fe f8ff 	bl	80017fc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	429a      	cmp	r2, r3
 8003608:	d902      	bls.n	8003610 <SPI_WaitFifoStateUntilTimeout+0x80>
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d13d      	bne.n	800368c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800361e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003628:	d111      	bne.n	800364e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003632:	d004      	beq.n	800363e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363c:	d107      	bne.n	800364e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003656:	d10f      	bne.n	8003678 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003676:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e010      	b.n	80036ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3b01      	subs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d196      	bne.n	80035da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000130 	.word	0x20000130

080036bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ff5b 	bl	8003590 <SPI_WaitFifoStateUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e027      	b.n	8003740 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fec0 	bl	8003480 <SPI_WaitFlagStateUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e014      	b.n	8003740 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff ff34 	bl	8003590 <SPI_WaitFifoStateUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e000      	b.n	8003740 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <malloc>:
 8003748:	4b02      	ldr	r3, [pc, #8]	; (8003754 <malloc+0xc>)
 800374a:	4601      	mov	r1, r0
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	f000 b82b 	b.w	80037a8 <_malloc_r>
 8003752:	bf00      	nop
 8003754:	20000194 	.word	0x20000194

08003758 <free>:
 8003758:	4b02      	ldr	r3, [pc, #8]	; (8003764 <free+0xc>)
 800375a:	4601      	mov	r1, r0
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f000 bb3f 	b.w	8003de0 <_free_r>
 8003762:	bf00      	nop
 8003764:	20000194 	.word	0x20000194

08003768 <sbrk_aligned>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4e0e      	ldr	r6, [pc, #56]	; (80037a4 <sbrk_aligned+0x3c>)
 800376c:	460c      	mov	r4, r1
 800376e:	6831      	ldr	r1, [r6, #0]
 8003770:	4605      	mov	r5, r0
 8003772:	b911      	cbnz	r1, 800377a <sbrk_aligned+0x12>
 8003774:	f000 fad6 	bl	8003d24 <_sbrk_r>
 8003778:	6030      	str	r0, [r6, #0]
 800377a:	4621      	mov	r1, r4
 800377c:	4628      	mov	r0, r5
 800377e:	f000 fad1 	bl	8003d24 <_sbrk_r>
 8003782:	1c43      	adds	r3, r0, #1
 8003784:	d00a      	beq.n	800379c <sbrk_aligned+0x34>
 8003786:	1cc4      	adds	r4, r0, #3
 8003788:	f024 0403 	bic.w	r4, r4, #3
 800378c:	42a0      	cmp	r0, r4
 800378e:	d007      	beq.n	80037a0 <sbrk_aligned+0x38>
 8003790:	1a21      	subs	r1, r4, r0
 8003792:	4628      	mov	r0, r5
 8003794:	f000 fac6 	bl	8003d24 <_sbrk_r>
 8003798:	3001      	adds	r0, #1
 800379a:	d101      	bne.n	80037a0 <sbrk_aligned+0x38>
 800379c:	f04f 34ff 	mov.w	r4, #4294967295
 80037a0:	4620      	mov	r0, r4
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	20000358 	.word	0x20000358

080037a8 <_malloc_r>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	1ccd      	adds	r5, r1, #3
 80037ae:	f025 0503 	bic.w	r5, r5, #3
 80037b2:	3508      	adds	r5, #8
 80037b4:	2d0c      	cmp	r5, #12
 80037b6:	bf38      	it	cc
 80037b8:	250c      	movcc	r5, #12
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	4607      	mov	r7, r0
 80037be:	db01      	blt.n	80037c4 <_malloc_r+0x1c>
 80037c0:	42a9      	cmp	r1, r5
 80037c2:	d905      	bls.n	80037d0 <_malloc_r+0x28>
 80037c4:	230c      	movs	r3, #12
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	2600      	movs	r6, #0
 80037ca:	4630      	mov	r0, r6
 80037cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038a4 <_malloc_r+0xfc>
 80037d4:	f000 f868 	bl	80038a8 <__malloc_lock>
 80037d8:	f8d8 3000 	ldr.w	r3, [r8]
 80037dc:	461c      	mov	r4, r3
 80037de:	bb5c      	cbnz	r4, 8003838 <_malloc_r+0x90>
 80037e0:	4629      	mov	r1, r5
 80037e2:	4638      	mov	r0, r7
 80037e4:	f7ff ffc0 	bl	8003768 <sbrk_aligned>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	4604      	mov	r4, r0
 80037ec:	d155      	bne.n	800389a <_malloc_r+0xf2>
 80037ee:	f8d8 4000 	ldr.w	r4, [r8]
 80037f2:	4626      	mov	r6, r4
 80037f4:	2e00      	cmp	r6, #0
 80037f6:	d145      	bne.n	8003884 <_malloc_r+0xdc>
 80037f8:	2c00      	cmp	r4, #0
 80037fa:	d048      	beq.n	800388e <_malloc_r+0xe6>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	4631      	mov	r1, r6
 8003800:	4638      	mov	r0, r7
 8003802:	eb04 0903 	add.w	r9, r4, r3
 8003806:	f000 fa8d 	bl	8003d24 <_sbrk_r>
 800380a:	4581      	cmp	r9, r0
 800380c:	d13f      	bne.n	800388e <_malloc_r+0xe6>
 800380e:	6821      	ldr	r1, [r4, #0]
 8003810:	1a6d      	subs	r5, r5, r1
 8003812:	4629      	mov	r1, r5
 8003814:	4638      	mov	r0, r7
 8003816:	f7ff ffa7 	bl	8003768 <sbrk_aligned>
 800381a:	3001      	adds	r0, #1
 800381c:	d037      	beq.n	800388e <_malloc_r+0xe6>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	442b      	add	r3, r5
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	f8d8 3000 	ldr.w	r3, [r8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d038      	beq.n	800389e <_malloc_r+0xf6>
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	42a2      	cmp	r2, r4
 8003830:	d12b      	bne.n	800388a <_malloc_r+0xe2>
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	e00f      	b.n	8003858 <_malloc_r+0xb0>
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	1b52      	subs	r2, r2, r5
 800383c:	d41f      	bmi.n	800387e <_malloc_r+0xd6>
 800383e:	2a0b      	cmp	r2, #11
 8003840:	d917      	bls.n	8003872 <_malloc_r+0xca>
 8003842:	1961      	adds	r1, r4, r5
 8003844:	42a3      	cmp	r3, r4
 8003846:	6025      	str	r5, [r4, #0]
 8003848:	bf18      	it	ne
 800384a:	6059      	strne	r1, [r3, #4]
 800384c:	6863      	ldr	r3, [r4, #4]
 800384e:	bf08      	it	eq
 8003850:	f8c8 1000 	streq.w	r1, [r8]
 8003854:	5162      	str	r2, [r4, r5]
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	4638      	mov	r0, r7
 800385a:	f104 060b 	add.w	r6, r4, #11
 800385e:	f000 f829 	bl	80038b4 <__malloc_unlock>
 8003862:	f026 0607 	bic.w	r6, r6, #7
 8003866:	1d23      	adds	r3, r4, #4
 8003868:	1af2      	subs	r2, r6, r3
 800386a:	d0ae      	beq.n	80037ca <_malloc_r+0x22>
 800386c:	1b9b      	subs	r3, r3, r6
 800386e:	50a3      	str	r3, [r4, r2]
 8003870:	e7ab      	b.n	80037ca <_malloc_r+0x22>
 8003872:	42a3      	cmp	r3, r4
 8003874:	6862      	ldr	r2, [r4, #4]
 8003876:	d1dd      	bne.n	8003834 <_malloc_r+0x8c>
 8003878:	f8c8 2000 	str.w	r2, [r8]
 800387c:	e7ec      	b.n	8003858 <_malloc_r+0xb0>
 800387e:	4623      	mov	r3, r4
 8003880:	6864      	ldr	r4, [r4, #4]
 8003882:	e7ac      	b.n	80037de <_malloc_r+0x36>
 8003884:	4634      	mov	r4, r6
 8003886:	6876      	ldr	r6, [r6, #4]
 8003888:	e7b4      	b.n	80037f4 <_malloc_r+0x4c>
 800388a:	4613      	mov	r3, r2
 800388c:	e7cc      	b.n	8003828 <_malloc_r+0x80>
 800388e:	230c      	movs	r3, #12
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4638      	mov	r0, r7
 8003894:	f000 f80e 	bl	80038b4 <__malloc_unlock>
 8003898:	e797      	b.n	80037ca <_malloc_r+0x22>
 800389a:	6025      	str	r5, [r4, #0]
 800389c:	e7dc      	b.n	8003858 <_malloc_r+0xb0>
 800389e:	605b      	str	r3, [r3, #4]
 80038a0:	deff      	udf	#255	; 0xff
 80038a2:	bf00      	nop
 80038a4:	20000354 	.word	0x20000354

080038a8 <__malloc_lock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <__malloc_lock+0x8>)
 80038aa:	f000 ba88 	b.w	8003dbe <__retarget_lock_acquire_recursive>
 80038ae:	bf00      	nop
 80038b0:	2000049c 	.word	0x2000049c

080038b4 <__malloc_unlock>:
 80038b4:	4801      	ldr	r0, [pc, #4]	; (80038bc <__malloc_unlock+0x8>)
 80038b6:	f000 ba83 	b.w	8003dc0 <__retarget_lock_release_recursive>
 80038ba:	bf00      	nop
 80038bc:	2000049c 	.word	0x2000049c

080038c0 <std>:
 80038c0:	2300      	movs	r3, #0
 80038c2:	b510      	push	{r4, lr}
 80038c4:	4604      	mov	r4, r0
 80038c6:	e9c0 3300 	strd	r3, r3, [r0]
 80038ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ce:	6083      	str	r3, [r0, #8]
 80038d0:	8181      	strh	r1, [r0, #12]
 80038d2:	6643      	str	r3, [r0, #100]	; 0x64
 80038d4:	81c2      	strh	r2, [r0, #14]
 80038d6:	6183      	str	r3, [r0, #24]
 80038d8:	4619      	mov	r1, r3
 80038da:	2208      	movs	r2, #8
 80038dc:	305c      	adds	r0, #92	; 0x5c
 80038de:	f000 f9e5 	bl	8003cac <memset>
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <std+0x58>)
 80038e4:	6263      	str	r3, [r4, #36]	; 0x24
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <std+0x5c>)
 80038e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <std+0x60>)
 80038ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <std+0x64>)
 80038f0:	6323      	str	r3, [r4, #48]	; 0x30
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <std+0x68>)
 80038f4:	6224      	str	r4, [r4, #32]
 80038f6:	429c      	cmp	r4, r3
 80038f8:	d006      	beq.n	8003908 <std+0x48>
 80038fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80038fe:	4294      	cmp	r4, r2
 8003900:	d002      	beq.n	8003908 <std+0x48>
 8003902:	33d0      	adds	r3, #208	; 0xd0
 8003904:	429c      	cmp	r4, r3
 8003906:	d105      	bne.n	8003914 <std+0x54>
 8003908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800390c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003910:	f000 ba54 	b.w	8003dbc <__retarget_lock_init_recursive>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	bf00      	nop
 8003918:	08003afd 	.word	0x08003afd
 800391c:	08003b1f 	.word	0x08003b1f
 8003920:	08003b57 	.word	0x08003b57
 8003924:	08003b7b 	.word	0x08003b7b
 8003928:	2000035c 	.word	0x2000035c

0800392c <stdio_exit_handler>:
 800392c:	4a02      	ldr	r2, [pc, #8]	; (8003938 <stdio_exit_handler+0xc>)
 800392e:	4903      	ldr	r1, [pc, #12]	; (800393c <stdio_exit_handler+0x10>)
 8003930:	4803      	ldr	r0, [pc, #12]	; (8003940 <stdio_exit_handler+0x14>)
 8003932:	f000 b869 	b.w	8003a08 <_fwalk_sglue>
 8003936:	bf00      	nop
 8003938:	2000013c 	.word	0x2000013c
 800393c:	08003f85 	.word	0x08003f85
 8003940:	20000148 	.word	0x20000148

08003944 <cleanup_stdio>:
 8003944:	6841      	ldr	r1, [r0, #4]
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <cleanup_stdio+0x34>)
 8003948:	4299      	cmp	r1, r3
 800394a:	b510      	push	{r4, lr}
 800394c:	4604      	mov	r4, r0
 800394e:	d001      	beq.n	8003954 <cleanup_stdio+0x10>
 8003950:	f000 fb18 	bl	8003f84 <_fflush_r>
 8003954:	68a1      	ldr	r1, [r4, #8]
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <cleanup_stdio+0x38>)
 8003958:	4299      	cmp	r1, r3
 800395a:	d002      	beq.n	8003962 <cleanup_stdio+0x1e>
 800395c:	4620      	mov	r0, r4
 800395e:	f000 fb11 	bl	8003f84 <_fflush_r>
 8003962:	68e1      	ldr	r1, [r4, #12]
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <cleanup_stdio+0x3c>)
 8003966:	4299      	cmp	r1, r3
 8003968:	d004      	beq.n	8003974 <cleanup_stdio+0x30>
 800396a:	4620      	mov	r0, r4
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f000 bb08 	b.w	8003f84 <_fflush_r>
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	2000035c 	.word	0x2000035c
 800397c:	200003c4 	.word	0x200003c4
 8003980:	2000042c 	.word	0x2000042c

08003984 <global_stdio_init.part.0>:
 8003984:	b510      	push	{r4, lr}
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <global_stdio_init.part.0+0x30>)
 8003988:	4c0b      	ldr	r4, [pc, #44]	; (80039b8 <global_stdio_init.part.0+0x34>)
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <global_stdio_init.part.0+0x38>)
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	4620      	mov	r0, r4
 8003990:	2200      	movs	r2, #0
 8003992:	2104      	movs	r1, #4
 8003994:	f7ff ff94 	bl	80038c0 <std>
 8003998:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800399c:	2201      	movs	r2, #1
 800399e:	2109      	movs	r1, #9
 80039a0:	f7ff ff8e 	bl	80038c0 <std>
 80039a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039a8:	2202      	movs	r2, #2
 80039aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ae:	2112      	movs	r1, #18
 80039b0:	f7ff bf86 	b.w	80038c0 <std>
 80039b4:	20000494 	.word	0x20000494
 80039b8:	2000035c 	.word	0x2000035c
 80039bc:	0800392d 	.word	0x0800392d

080039c0 <__sfp_lock_acquire>:
 80039c0:	4801      	ldr	r0, [pc, #4]	; (80039c8 <__sfp_lock_acquire+0x8>)
 80039c2:	f000 b9fc 	b.w	8003dbe <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	2000049d 	.word	0x2000049d

080039cc <__sfp_lock_release>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__sfp_lock_release+0x8>)
 80039ce:	f000 b9f7 	b.w	8003dc0 <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	2000049d 	.word	0x2000049d

080039d8 <__sinit>:
 80039d8:	b510      	push	{r4, lr}
 80039da:	4604      	mov	r4, r0
 80039dc:	f7ff fff0 	bl	80039c0 <__sfp_lock_acquire>
 80039e0:	6a23      	ldr	r3, [r4, #32]
 80039e2:	b11b      	cbz	r3, 80039ec <__sinit+0x14>
 80039e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e8:	f7ff bff0 	b.w	80039cc <__sfp_lock_release>
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <__sinit+0x28>)
 80039ee:	6223      	str	r3, [r4, #32]
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <__sinit+0x2c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f5      	bne.n	80039e4 <__sinit+0xc>
 80039f8:	f7ff ffc4 	bl	8003984 <global_stdio_init.part.0>
 80039fc:	e7f2      	b.n	80039e4 <__sinit+0xc>
 80039fe:	bf00      	nop
 8003a00:	08003945 	.word	0x08003945
 8003a04:	20000494 	.word	0x20000494

08003a08 <_fwalk_sglue>:
 8003a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	4688      	mov	r8, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	2600      	movs	r6, #0
 8003a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a18:	f1b9 0901 	subs.w	r9, r9, #1
 8003a1c:	d505      	bpl.n	8003a2a <_fwalk_sglue+0x22>
 8003a1e:	6824      	ldr	r4, [r4, #0]
 8003a20:	2c00      	cmp	r4, #0
 8003a22:	d1f7      	bne.n	8003a14 <_fwalk_sglue+0xc>
 8003a24:	4630      	mov	r0, r6
 8003a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a2a:	89ab      	ldrh	r3, [r5, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d907      	bls.n	8003a40 <_fwalk_sglue+0x38>
 8003a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a34:	3301      	adds	r3, #1
 8003a36:	d003      	beq.n	8003a40 <_fwalk_sglue+0x38>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	47c0      	blx	r8
 8003a3e:	4306      	orrs	r6, r0
 8003a40:	3568      	adds	r5, #104	; 0x68
 8003a42:	e7e9      	b.n	8003a18 <_fwalk_sglue+0x10>

08003a44 <_puts_r>:
 8003a44:	6a03      	ldr	r3, [r0, #32]
 8003a46:	b570      	push	{r4, r5, r6, lr}
 8003a48:	6884      	ldr	r4, [r0, #8]
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	460e      	mov	r6, r1
 8003a4e:	b90b      	cbnz	r3, 8003a54 <_puts_r+0x10>
 8003a50:	f7ff ffc2 	bl	80039d8 <__sinit>
 8003a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a56:	07db      	lsls	r3, r3, #31
 8003a58:	d405      	bmi.n	8003a66 <_puts_r+0x22>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	0598      	lsls	r0, r3, #22
 8003a5e:	d402      	bmi.n	8003a66 <_puts_r+0x22>
 8003a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a62:	f000 f9ac 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	0719      	lsls	r1, r3, #28
 8003a6a:	d513      	bpl.n	8003a94 <_puts_r+0x50>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	b18b      	cbz	r3, 8003a94 <_puts_r+0x50>
 8003a70:	3e01      	subs	r6, #1
 8003a72:	68a3      	ldr	r3, [r4, #8]
 8003a74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	b9e9      	cbnz	r1, 8003aba <_puts_r+0x76>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da2e      	bge.n	8003ae0 <_puts_r+0x9c>
 8003a82:	4622      	mov	r2, r4
 8003a84:	210a      	movs	r1, #10
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 f87b 	bl	8003b82 <__swbuf_r>
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d007      	beq.n	8003aa0 <_puts_r+0x5c>
 8003a90:	250a      	movs	r5, #10
 8003a92:	e007      	b.n	8003aa4 <_puts_r+0x60>
 8003a94:	4621      	mov	r1, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 f8b0 	bl	8003bfc <__swsetup_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d0e7      	beq.n	8003a70 <_puts_r+0x2c>
 8003aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8003aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aa6:	07da      	lsls	r2, r3, #31
 8003aa8:	d405      	bmi.n	8003ab6 <_puts_r+0x72>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	059b      	lsls	r3, r3, #22
 8003aae:	d402      	bmi.n	8003ab6 <_puts_r+0x72>
 8003ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ab2:	f000 f985 	bl	8003dc0 <__retarget_lock_release_recursive>
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da04      	bge.n	8003ac8 <_puts_r+0x84>
 8003abe:	69a2      	ldr	r2, [r4, #24]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	dc06      	bgt.n	8003ad2 <_puts_r+0x8e>
 8003ac4:	290a      	cmp	r1, #10
 8003ac6:	d004      	beq.n	8003ad2 <_puts_r+0x8e>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	6022      	str	r2, [r4, #0]
 8003ace:	7019      	strb	r1, [r3, #0]
 8003ad0:	e7cf      	b.n	8003a72 <_puts_r+0x2e>
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f854 	bl	8003b82 <__swbuf_r>
 8003ada:	3001      	adds	r0, #1
 8003adc:	d1c9      	bne.n	8003a72 <_puts_r+0x2e>
 8003ade:	e7df      	b.n	8003aa0 <_puts_r+0x5c>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	250a      	movs	r5, #10
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	6022      	str	r2, [r4, #0]
 8003ae8:	701d      	strb	r5, [r3, #0]
 8003aea:	e7db      	b.n	8003aa4 <_puts_r+0x60>

08003aec <puts>:
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <puts+0xc>)
 8003aee:	4601      	mov	r1, r0
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	f7ff bfa7 	b.w	8003a44 <_puts_r>
 8003af6:	bf00      	nop
 8003af8:	20000194 	.word	0x20000194

08003afc <__sread>:
 8003afc:	b510      	push	{r4, lr}
 8003afe:	460c      	mov	r4, r1
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	f000 f8fc 	bl	8003d00 <_read_r>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	bfab      	itete	ge
 8003b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b10:	181b      	addge	r3, r3, r0
 8003b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b16:	bfac      	ite	ge
 8003b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1a:	81a3      	strhlt	r3, [r4, #12]
 8003b1c:	bd10      	pop	{r4, pc}

08003b1e <__swrite>:
 8003b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b22:	461f      	mov	r7, r3
 8003b24:	898b      	ldrh	r3, [r1, #12]
 8003b26:	05db      	lsls	r3, r3, #23
 8003b28:	4605      	mov	r5, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	d505      	bpl.n	8003b3c <__swrite+0x1e>
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	2302      	movs	r3, #2
 8003b36:	2200      	movs	r2, #0
 8003b38:	f000 f8d0 	bl	8003cdc <_lseek_r>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	4632      	mov	r2, r6
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	f000 b8f7 	b.w	8003d44 <_write_r>

08003b56 <__sseek>:
 8003b56:	b510      	push	{r4, lr}
 8003b58:	460c      	mov	r4, r1
 8003b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5e:	f000 f8bd 	bl	8003cdc <_lseek_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	bf15      	itete	ne
 8003b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b72:	81a3      	strheq	r3, [r4, #12]
 8003b74:	bf18      	it	ne
 8003b76:	81a3      	strhne	r3, [r4, #12]
 8003b78:	bd10      	pop	{r4, pc}

08003b7a <__sclose>:
 8003b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7e:	f000 b89d 	b.w	8003cbc <_close_r>

08003b82 <__swbuf_r>:
 8003b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b84:	460e      	mov	r6, r1
 8003b86:	4614      	mov	r4, r2
 8003b88:	4605      	mov	r5, r0
 8003b8a:	b118      	cbz	r0, 8003b94 <__swbuf_r+0x12>
 8003b8c:	6a03      	ldr	r3, [r0, #32]
 8003b8e:	b90b      	cbnz	r3, 8003b94 <__swbuf_r+0x12>
 8003b90:	f7ff ff22 	bl	80039d8 <__sinit>
 8003b94:	69a3      	ldr	r3, [r4, #24]
 8003b96:	60a3      	str	r3, [r4, #8]
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	071a      	lsls	r2, r3, #28
 8003b9c:	d525      	bpl.n	8003bea <__swbuf_r+0x68>
 8003b9e:	6923      	ldr	r3, [r4, #16]
 8003ba0:	b31b      	cbz	r3, 8003bea <__swbuf_r+0x68>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	6922      	ldr	r2, [r4, #16]
 8003ba6:	1a98      	subs	r0, r3, r2
 8003ba8:	6963      	ldr	r3, [r4, #20]
 8003baa:	b2f6      	uxtb	r6, r6
 8003bac:	4283      	cmp	r3, r0
 8003bae:	4637      	mov	r7, r6
 8003bb0:	dc04      	bgt.n	8003bbc <__swbuf_r+0x3a>
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 f9e5 	bl	8003f84 <_fflush_r>
 8003bba:	b9e0      	cbnz	r0, 8003bf6 <__swbuf_r+0x74>
 8003bbc:	68a3      	ldr	r3, [r4, #8]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	60a3      	str	r3, [r4, #8]
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	6022      	str	r2, [r4, #0]
 8003bc8:	701e      	strb	r6, [r3, #0]
 8003bca:	6962      	ldr	r2, [r4, #20]
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d004      	beq.n	8003bdc <__swbuf_r+0x5a>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	07db      	lsls	r3, r3, #31
 8003bd6:	d506      	bpl.n	8003be6 <__swbuf_r+0x64>
 8003bd8:	2e0a      	cmp	r6, #10
 8003bda:	d104      	bne.n	8003be6 <__swbuf_r+0x64>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 f9d0 	bl	8003f84 <_fflush_r>
 8003be4:	b938      	cbnz	r0, 8003bf6 <__swbuf_r+0x74>
 8003be6:	4638      	mov	r0, r7
 8003be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 f805 	bl	8003bfc <__swsetup_r>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d0d5      	beq.n	8003ba2 <__swbuf_r+0x20>
 8003bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8003bfa:	e7f4      	b.n	8003be6 <__swbuf_r+0x64>

08003bfc <__swsetup_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <__swsetup_r+0xac>)
 8003c00:	4605      	mov	r5, r0
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	460c      	mov	r4, r1
 8003c06:	b118      	cbz	r0, 8003c10 <__swsetup_r+0x14>
 8003c08:	6a03      	ldr	r3, [r0, #32]
 8003c0a:	b90b      	cbnz	r3, 8003c10 <__swsetup_r+0x14>
 8003c0c:	f7ff fee4 	bl	80039d8 <__sinit>
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c16:	0718      	lsls	r0, r3, #28
 8003c18:	d422      	bmi.n	8003c60 <__swsetup_r+0x64>
 8003c1a:	06d9      	lsls	r1, r3, #27
 8003c1c:	d407      	bmi.n	8003c2e <__swsetup_r+0x32>
 8003c1e:	2309      	movs	r3, #9
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	e034      	b.n	8003c98 <__swsetup_r+0x9c>
 8003c2e:	0758      	lsls	r0, r3, #29
 8003c30:	d512      	bpl.n	8003c58 <__swsetup_r+0x5c>
 8003c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c34:	b141      	cbz	r1, 8003c48 <__swsetup_r+0x4c>
 8003c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c3a:	4299      	cmp	r1, r3
 8003c3c:	d002      	beq.n	8003c44 <__swsetup_r+0x48>
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f8ce 	bl	8003de0 <_free_r>
 8003c44:	2300      	movs	r3, #0
 8003c46:	6363      	str	r3, [r4, #52]	; 0x34
 8003c48:	89a3      	ldrh	r3, [r4, #12]
 8003c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	2300      	movs	r3, #0
 8003c52:	6063      	str	r3, [r4, #4]
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	f043 0308 	orr.w	r3, r3, #8
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	b94b      	cbnz	r3, 8003c78 <__swsetup_r+0x7c>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6e:	d003      	beq.n	8003c78 <__swsetup_r+0x7c>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f9d4 	bl	8004020 <__smakebuf_r>
 8003c78:	89a0      	ldrh	r0, [r4, #12]
 8003c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c7e:	f010 0301 	ands.w	r3, r0, #1
 8003c82:	d00a      	beq.n	8003c9a <__swsetup_r+0x9e>
 8003c84:	2300      	movs	r3, #0
 8003c86:	60a3      	str	r3, [r4, #8]
 8003c88:	6963      	ldr	r3, [r4, #20]
 8003c8a:	425b      	negs	r3, r3
 8003c8c:	61a3      	str	r3, [r4, #24]
 8003c8e:	6923      	ldr	r3, [r4, #16]
 8003c90:	b943      	cbnz	r3, 8003ca4 <__swsetup_r+0xa8>
 8003c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c96:	d1c4      	bne.n	8003c22 <__swsetup_r+0x26>
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
 8003c9a:	0781      	lsls	r1, r0, #30
 8003c9c:	bf58      	it	pl
 8003c9e:	6963      	ldrpl	r3, [r4, #20]
 8003ca0:	60a3      	str	r3, [r4, #8]
 8003ca2:	e7f4      	b.n	8003c8e <__swsetup_r+0x92>
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	e7f7      	b.n	8003c98 <__swsetup_r+0x9c>
 8003ca8:	20000194 	.word	0x20000194

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <_close_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4d06      	ldr	r5, [pc, #24]	; (8003cd8 <_close_r+0x1c>)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	f7fd fc0c 	bl	80014e4 <_close>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_close_r+0x1a>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_close_r+0x1a>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	20000498 	.word	0x20000498

08003cdc <_lseek_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d07      	ldr	r5, [pc, #28]	; (8003cfc <_lseek_r+0x20>)
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	602a      	str	r2, [r5, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f7fd fc21 	bl	8001532 <_lseek>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_lseek_r+0x1e>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_lseek_r+0x1e>
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	20000498 	.word	0x20000498

08003d00 <_read_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4d07      	ldr	r5, [pc, #28]	; (8003d20 <_read_r+0x20>)
 8003d04:	4604      	mov	r4, r0
 8003d06:	4608      	mov	r0, r1
 8003d08:	4611      	mov	r1, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	602a      	str	r2, [r5, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7fd fb9e 	bl	8001450 <_read>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_read_r+0x1e>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_read_r+0x1e>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000498 	.word	0x20000498

08003d24 <_sbrk_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d06      	ldr	r5, [pc, #24]	; (8003d40 <_sbrk_r+0x1c>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	f7fd fbac 	bl	800148c <_sbrk>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_sbrk_r+0x1a>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_sbrk_r+0x1a>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000498 	.word	0x20000498

08003d44 <_write_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d07      	ldr	r5, [pc, #28]	; (8003d64 <_write_r+0x20>)
 8003d48:	4604      	mov	r4, r0
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	602a      	str	r2, [r5, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f7fd f887 	bl	8000e66 <_write>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d102      	bne.n	8003d62 <_write_r+0x1e>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	b103      	cbz	r3, 8003d62 <_write_r+0x1e>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	20000498 	.word	0x20000498

08003d68 <__errno>:
 8003d68:	4b01      	ldr	r3, [pc, #4]	; (8003d70 <__errno+0x8>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000194 	.word	0x20000194

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	4d0d      	ldr	r5, [pc, #52]	; (8003dac <__libc_init_array+0x38>)
 8003d78:	4c0d      	ldr	r4, [pc, #52]	; (8003db0 <__libc_init_array+0x3c>)
 8003d7a:	1b64      	subs	r4, r4, r5
 8003d7c:	10a4      	asrs	r4, r4, #2
 8003d7e:	2600      	movs	r6, #0
 8003d80:	42a6      	cmp	r6, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	4d0b      	ldr	r5, [pc, #44]	; (8003db4 <__libc_init_array+0x40>)
 8003d86:	4c0c      	ldr	r4, [pc, #48]	; (8003db8 <__libc_init_array+0x44>)
 8003d88:	f000 f9a8 	bl	80040dc <_init>
 8003d8c:	1b64      	subs	r4, r4, r5
 8003d8e:	10a4      	asrs	r4, r4, #2
 8003d90:	2600      	movs	r6, #0
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9c:	4798      	blx	r3
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da6:	4798      	blx	r3
 8003da8:	3601      	adds	r6, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	08004164 	.word	0x08004164
 8003db0:	08004164 	.word	0x08004164
 8003db4:	08004164 	.word	0x08004164
 8003db8:	08004168 	.word	0x08004168

08003dbc <__retarget_lock_init_recursive>:
 8003dbc:	4770      	bx	lr

08003dbe <__retarget_lock_acquire_recursive>:
 8003dbe:	4770      	bx	lr

08003dc0 <__retarget_lock_release_recursive>:
 8003dc0:	4770      	bx	lr

08003dc2 <memcpy>:
 8003dc2:	440a      	add	r2, r1
 8003dc4:	4291      	cmp	r1, r2
 8003dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dca:	d100      	bne.n	8003dce <memcpy+0xc>
 8003dcc:	4770      	bx	lr
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dd8:	4291      	cmp	r1, r2
 8003dda:	d1f9      	bne.n	8003dd0 <memcpy+0xe>
 8003ddc:	bd10      	pop	{r4, pc}
	...

08003de0 <_free_r>:
 8003de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003de2:	2900      	cmp	r1, #0
 8003de4:	d044      	beq.n	8003e70 <_free_r+0x90>
 8003de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dea:	9001      	str	r0, [sp, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f1a1 0404 	sub.w	r4, r1, #4
 8003df2:	bfb8      	it	lt
 8003df4:	18e4      	addlt	r4, r4, r3
 8003df6:	f7ff fd57 	bl	80038a8 <__malloc_lock>
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <_free_r+0x94>)
 8003dfc:	9801      	ldr	r0, [sp, #4]
 8003dfe:	6813      	ldr	r3, [r2, #0]
 8003e00:	b933      	cbnz	r3, 8003e10 <_free_r+0x30>
 8003e02:	6063      	str	r3, [r4, #4]
 8003e04:	6014      	str	r4, [r2, #0]
 8003e06:	b003      	add	sp, #12
 8003e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e0c:	f7ff bd52 	b.w	80038b4 <__malloc_unlock>
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	d908      	bls.n	8003e26 <_free_r+0x46>
 8003e14:	6825      	ldr	r5, [r4, #0]
 8003e16:	1961      	adds	r1, r4, r5
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	bf01      	itttt	eq
 8003e1c:	6819      	ldreq	r1, [r3, #0]
 8003e1e:	685b      	ldreq	r3, [r3, #4]
 8003e20:	1949      	addeq	r1, r1, r5
 8003e22:	6021      	streq	r1, [r4, #0]
 8003e24:	e7ed      	b.n	8003e02 <_free_r+0x22>
 8003e26:	461a      	mov	r2, r3
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	b10b      	cbz	r3, 8003e30 <_free_r+0x50>
 8003e2c:	42a3      	cmp	r3, r4
 8003e2e:	d9fa      	bls.n	8003e26 <_free_r+0x46>
 8003e30:	6811      	ldr	r1, [r2, #0]
 8003e32:	1855      	adds	r5, r2, r1
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d10b      	bne.n	8003e50 <_free_r+0x70>
 8003e38:	6824      	ldr	r4, [r4, #0]
 8003e3a:	4421      	add	r1, r4
 8003e3c:	1854      	adds	r4, r2, r1
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	6011      	str	r1, [r2, #0]
 8003e42:	d1e0      	bne.n	8003e06 <_free_r+0x26>
 8003e44:	681c      	ldr	r4, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	6053      	str	r3, [r2, #4]
 8003e4a:	440c      	add	r4, r1
 8003e4c:	6014      	str	r4, [r2, #0]
 8003e4e:	e7da      	b.n	8003e06 <_free_r+0x26>
 8003e50:	d902      	bls.n	8003e58 <_free_r+0x78>
 8003e52:	230c      	movs	r3, #12
 8003e54:	6003      	str	r3, [r0, #0]
 8003e56:	e7d6      	b.n	8003e06 <_free_r+0x26>
 8003e58:	6825      	ldr	r5, [r4, #0]
 8003e5a:	1961      	adds	r1, r4, r5
 8003e5c:	428b      	cmp	r3, r1
 8003e5e:	bf04      	itt	eq
 8003e60:	6819      	ldreq	r1, [r3, #0]
 8003e62:	685b      	ldreq	r3, [r3, #4]
 8003e64:	6063      	str	r3, [r4, #4]
 8003e66:	bf04      	itt	eq
 8003e68:	1949      	addeq	r1, r1, r5
 8003e6a:	6021      	streq	r1, [r4, #0]
 8003e6c:	6054      	str	r4, [r2, #4]
 8003e6e:	e7ca      	b.n	8003e06 <_free_r+0x26>
 8003e70:	b003      	add	sp, #12
 8003e72:	bd30      	pop	{r4, r5, pc}
 8003e74:	20000354 	.word	0x20000354

08003e78 <__sflush_r>:
 8003e78:	898a      	ldrh	r2, [r1, #12]
 8003e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	4605      	mov	r5, r0
 8003e80:	0710      	lsls	r0, r2, #28
 8003e82:	460c      	mov	r4, r1
 8003e84:	d458      	bmi.n	8003f38 <__sflush_r+0xc0>
 8003e86:	684b      	ldr	r3, [r1, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	dc05      	bgt.n	8003e98 <__sflush_r+0x20>
 8003e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	dc02      	bgt.n	8003e98 <__sflush_r+0x20>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e9a:	2e00      	cmp	r6, #0
 8003e9c:	d0f9      	beq.n	8003e92 <__sflush_r+0x1a>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ea4:	682f      	ldr	r7, [r5, #0]
 8003ea6:	6a21      	ldr	r1, [r4, #32]
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	d032      	beq.n	8003f12 <__sflush_r+0x9a>
 8003eac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	075a      	lsls	r2, r3, #29
 8003eb2:	d505      	bpl.n	8003ec0 <__sflush_r+0x48>
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	1ac0      	subs	r0, r0, r3
 8003eb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eba:	b10b      	cbz	r3, 8003ec0 <__sflush_r+0x48>
 8003ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ebe:	1ac0      	subs	r0, r0, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec6:	6a21      	ldr	r1, [r4, #32]
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b0      	blx	r6
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	d106      	bne.n	8003ee0 <__sflush_r+0x68>
 8003ed2:	6829      	ldr	r1, [r5, #0]
 8003ed4:	291d      	cmp	r1, #29
 8003ed6:	d82b      	bhi.n	8003f30 <__sflush_r+0xb8>
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <__sflush_r+0x108>)
 8003eda:	410a      	asrs	r2, r1
 8003edc:	07d6      	lsls	r6, r2, #31
 8003ede:	d427      	bmi.n	8003f30 <__sflush_r+0xb8>
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	6062      	str	r2, [r4, #4]
 8003ee4:	04d9      	lsls	r1, r3, #19
 8003ee6:	6922      	ldr	r2, [r4, #16]
 8003ee8:	6022      	str	r2, [r4, #0]
 8003eea:	d504      	bpl.n	8003ef6 <__sflush_r+0x7e>
 8003eec:	1c42      	adds	r2, r0, #1
 8003eee:	d101      	bne.n	8003ef4 <__sflush_r+0x7c>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	b903      	cbnz	r3, 8003ef6 <__sflush_r+0x7e>
 8003ef4:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ef8:	602f      	str	r7, [r5, #0]
 8003efa:	2900      	cmp	r1, #0
 8003efc:	d0c9      	beq.n	8003e92 <__sflush_r+0x1a>
 8003efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f02:	4299      	cmp	r1, r3
 8003f04:	d002      	beq.n	8003f0c <__sflush_r+0x94>
 8003f06:	4628      	mov	r0, r5
 8003f08:	f7ff ff6a 	bl	8003de0 <_free_r>
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	6360      	str	r0, [r4, #52]	; 0x34
 8003f10:	e7c0      	b.n	8003e94 <__sflush_r+0x1c>
 8003f12:	2301      	movs	r3, #1
 8003f14:	4628      	mov	r0, r5
 8003f16:	47b0      	blx	r6
 8003f18:	1c41      	adds	r1, r0, #1
 8003f1a:	d1c8      	bne.n	8003eae <__sflush_r+0x36>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0c5      	beq.n	8003eae <__sflush_r+0x36>
 8003f22:	2b1d      	cmp	r3, #29
 8003f24:	d001      	beq.n	8003f2a <__sflush_r+0xb2>
 8003f26:	2b16      	cmp	r3, #22
 8003f28:	d101      	bne.n	8003f2e <__sflush_r+0xb6>
 8003f2a:	602f      	str	r7, [r5, #0]
 8003f2c:	e7b1      	b.n	8003e92 <__sflush_r+0x1a>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	e7ad      	b.n	8003e94 <__sflush_r+0x1c>
 8003f38:	690f      	ldr	r7, [r1, #16]
 8003f3a:	2f00      	cmp	r7, #0
 8003f3c:	d0a9      	beq.n	8003e92 <__sflush_r+0x1a>
 8003f3e:	0793      	lsls	r3, r2, #30
 8003f40:	680e      	ldr	r6, [r1, #0]
 8003f42:	bf08      	it	eq
 8003f44:	694b      	ldreq	r3, [r1, #20]
 8003f46:	600f      	str	r7, [r1, #0]
 8003f48:	bf18      	it	ne
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	eba6 0807 	sub.w	r8, r6, r7
 8003f50:	608b      	str	r3, [r1, #8]
 8003f52:	f1b8 0f00 	cmp.w	r8, #0
 8003f56:	dd9c      	ble.n	8003e92 <__sflush_r+0x1a>
 8003f58:	6a21      	ldr	r1, [r4, #32]
 8003f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	463a      	mov	r2, r7
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b0      	blx	r6
 8003f64:	2800      	cmp	r0, #0
 8003f66:	dc06      	bgt.n	8003f76 <__sflush_r+0xfe>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6e:	81a3      	strh	r3, [r4, #12]
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	e78e      	b.n	8003e94 <__sflush_r+0x1c>
 8003f76:	4407      	add	r7, r0
 8003f78:	eba8 0800 	sub.w	r8, r8, r0
 8003f7c:	e7e9      	b.n	8003f52 <__sflush_r+0xda>
 8003f7e:	bf00      	nop
 8003f80:	dfbffffe 	.word	0xdfbffffe

08003f84 <_fflush_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	690b      	ldr	r3, [r1, #16]
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b913      	cbnz	r3, 8003f94 <_fflush_r+0x10>
 8003f8e:	2500      	movs	r5, #0
 8003f90:	4628      	mov	r0, r5
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	b118      	cbz	r0, 8003f9e <_fflush_r+0x1a>
 8003f96:	6a03      	ldr	r3, [r0, #32]
 8003f98:	b90b      	cbnz	r3, 8003f9e <_fflush_r+0x1a>
 8003f9a:	f7ff fd1d 	bl	80039d8 <__sinit>
 8003f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f3      	beq.n	8003f8e <_fflush_r+0xa>
 8003fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fa8:	07d0      	lsls	r0, r2, #31
 8003faa:	d404      	bmi.n	8003fb6 <_fflush_r+0x32>
 8003fac:	0599      	lsls	r1, r3, #22
 8003fae:	d402      	bmi.n	8003fb6 <_fflush_r+0x32>
 8003fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fb2:	f7ff ff04 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	4621      	mov	r1, r4
 8003fba:	f7ff ff5d 	bl	8003e78 <__sflush_r>
 8003fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fc0:	07da      	lsls	r2, r3, #31
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	d4e4      	bmi.n	8003f90 <_fflush_r+0xc>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	059b      	lsls	r3, r3, #22
 8003fca:	d4e1      	bmi.n	8003f90 <_fflush_r+0xc>
 8003fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fce:	f7ff fef7 	bl	8003dc0 <__retarget_lock_release_recursive>
 8003fd2:	e7dd      	b.n	8003f90 <_fflush_r+0xc>

08003fd4 <__swhatbuf_r>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	b096      	sub	sp, #88	; 0x58
 8003fe0:	4615      	mov	r5, r2
 8003fe2:	461e      	mov	r6, r3
 8003fe4:	da0d      	bge.n	8004002 <__swhatbuf_r+0x2e>
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	bf0c      	ite	eq
 8003ff2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003ff6:	2340      	movne	r3, #64	; 0x40
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	6031      	str	r1, [r6, #0]
 8003ffc:	602b      	str	r3, [r5, #0]
 8003ffe:	b016      	add	sp, #88	; 0x58
 8004000:	bd70      	pop	{r4, r5, r6, pc}
 8004002:	466a      	mov	r2, sp
 8004004:	f000 f848 	bl	8004098 <_fstat_r>
 8004008:	2800      	cmp	r0, #0
 800400a:	dbec      	blt.n	8003fe6 <__swhatbuf_r+0x12>
 800400c:	9901      	ldr	r1, [sp, #4]
 800400e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004012:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004016:	4259      	negs	r1, r3
 8004018:	4159      	adcs	r1, r3
 800401a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800401e:	e7eb      	b.n	8003ff8 <__swhatbuf_r+0x24>

08004020 <__smakebuf_r>:
 8004020:	898b      	ldrh	r3, [r1, #12]
 8004022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004024:	079d      	lsls	r5, r3, #30
 8004026:	4606      	mov	r6, r0
 8004028:	460c      	mov	r4, r1
 800402a:	d507      	bpl.n	800403c <__smakebuf_r+0x1c>
 800402c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	2301      	movs	r3, #1
 8004036:	6163      	str	r3, [r4, #20]
 8004038:	b002      	add	sp, #8
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	ab01      	add	r3, sp, #4
 800403e:	466a      	mov	r2, sp
 8004040:	f7ff ffc8 	bl	8003fd4 <__swhatbuf_r>
 8004044:	9900      	ldr	r1, [sp, #0]
 8004046:	4605      	mov	r5, r0
 8004048:	4630      	mov	r0, r6
 800404a:	f7ff fbad 	bl	80037a8 <_malloc_r>
 800404e:	b948      	cbnz	r0, 8004064 <__smakebuf_r+0x44>
 8004050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004054:	059a      	lsls	r2, r3, #22
 8004056:	d4ef      	bmi.n	8004038 <__smakebuf_r+0x18>
 8004058:	f023 0303 	bic.w	r3, r3, #3
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	e7e3      	b.n	800402c <__smakebuf_r+0xc>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	6020      	str	r0, [r4, #0]
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	81a3      	strh	r3, [r4, #12]
 800406e:	9b00      	ldr	r3, [sp, #0]
 8004070:	6163      	str	r3, [r4, #20]
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	6120      	str	r0, [r4, #16]
 8004076:	b15b      	cbz	r3, 8004090 <__smakebuf_r+0x70>
 8004078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800407c:	4630      	mov	r0, r6
 800407e:	f000 f81d 	bl	80040bc <_isatty_r>
 8004082:	b128      	cbz	r0, 8004090 <__smakebuf_r+0x70>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	431d      	orrs	r5, r3
 8004094:	81a5      	strh	r5, [r4, #12]
 8004096:	e7cf      	b.n	8004038 <__smakebuf_r+0x18>

08004098 <_fstat_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d07      	ldr	r5, [pc, #28]	; (80040b8 <_fstat_r+0x20>)
 800409c:	2300      	movs	r3, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	f7fd fa29 	bl	80014fc <_fstat>
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	d102      	bne.n	80040b4 <_fstat_r+0x1c>
 80040ae:	682b      	ldr	r3, [r5, #0]
 80040b0:	b103      	cbz	r3, 80040b4 <_fstat_r+0x1c>
 80040b2:	6023      	str	r3, [r4, #0]
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
 80040b6:	bf00      	nop
 80040b8:	20000498 	.word	0x20000498

080040bc <_isatty_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d06      	ldr	r5, [pc, #24]	; (80040d8 <_isatty_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fd fa28 	bl	800151c <_isatty>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_isatty_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_isatty_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20000498 	.word	0x20000498

080040dc <_init>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	bf00      	nop
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr

080040e8 <_fini>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr
